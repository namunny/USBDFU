
USBDFU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b94  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003d18  08003d18  00013d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d70  08003d70  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08003d70  08003d70  00013d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d78  08003d78  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d78  08003d78  00013d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d7c  08003d7c  00013d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08003d80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010c4  200001e0  08003f60  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012a4  08003f60  000212a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f80  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029c0  00000000  00000000  00031189  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000af0  00000000  00000000  00033b50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009a8  00000000  00000000  00034640  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fca3  00000000  00000000  00034fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c470  00000000  00000000  00054c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b0721  00000000  00000000  000610fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011181c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c54  00000000  00000000  00111898  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	200001e0 	.word	0x200001e0
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08003d00 	.word	0x08003d00

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	200001e4 	.word	0x200001e4
 80001c0:	08003d00 	.word	0x08003d00

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001d8:	f000 b974 	b.w	80004c4 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	468c      	mov	ip, r1
 80001fa:	4604      	mov	r4, r0
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d14b      	bne.n	800029a <__udivmoddi4+0xa6>
 8000202:	428a      	cmp	r2, r1
 8000204:	4615      	mov	r5, r2
 8000206:	d967      	bls.n	80002d8 <__udivmoddi4+0xe4>
 8000208:	fab2 f282 	clz	r2, r2
 800020c:	b14a      	cbz	r2, 8000222 <__udivmoddi4+0x2e>
 800020e:	f1c2 0720 	rsb	r7, r2, #32
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	fa20 f707 	lsr.w	r7, r0, r7
 800021a:	4095      	lsls	r5, r2
 800021c:	ea47 0c03 	orr.w	ip, r7, r3
 8000220:	4094      	lsls	r4, r2
 8000222:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000226:	fbbc f7fe 	udiv	r7, ip, lr
 800022a:	fa1f f885 	uxth.w	r8, r5
 800022e:	fb0e c317 	mls	r3, lr, r7, ip
 8000232:	fb07 f908 	mul.w	r9, r7, r8
 8000236:	0c21      	lsrs	r1, r4, #16
 8000238:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023c:	4599      	cmp	r9, r3
 800023e:	d909      	bls.n	8000254 <__udivmoddi4+0x60>
 8000240:	18eb      	adds	r3, r5, r3
 8000242:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 8000246:	f080 811c 	bcs.w	8000482 <__udivmoddi4+0x28e>
 800024a:	4599      	cmp	r9, r3
 800024c:	f240 8119 	bls.w	8000482 <__udivmoddi4+0x28e>
 8000250:	3f02      	subs	r7, #2
 8000252:	442b      	add	r3, r5
 8000254:	eba3 0309 	sub.w	r3, r3, r9
 8000258:	fbb3 f0fe 	udiv	r0, r3, lr
 800025c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000260:	fb00 f108 	mul.w	r1, r0, r8
 8000264:	b2a4      	uxth	r4, r4
 8000266:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026a:	42a1      	cmp	r1, r4
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x8e>
 800026e:	192c      	adds	r4, r5, r4
 8000270:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000274:	f080 8107 	bcs.w	8000486 <__udivmoddi4+0x292>
 8000278:	42a1      	cmp	r1, r4
 800027a:	f240 8104 	bls.w	8000486 <__udivmoddi4+0x292>
 800027e:	3802      	subs	r0, #2
 8000280:	442c      	add	r4, r5
 8000282:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000286:	2700      	movs	r7, #0
 8000288:	1a64      	subs	r4, r4, r1
 800028a:	b11e      	cbz	r6, 8000294 <__udivmoddi4+0xa0>
 800028c:	2300      	movs	r3, #0
 800028e:	40d4      	lsrs	r4, r2
 8000290:	e9c6 4300 	strd	r4, r3, [r6]
 8000294:	4639      	mov	r1, r7
 8000296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029a:	428b      	cmp	r3, r1
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0xbe>
 800029e:	2e00      	cmp	r6, #0
 80002a0:	f000 80ec 	beq.w	800047c <__udivmoddi4+0x288>
 80002a4:	2700      	movs	r7, #0
 80002a6:	e9c6 0100 	strd	r0, r1, [r6]
 80002aa:	4638      	mov	r0, r7
 80002ac:	4639      	mov	r1, r7
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	fab3 f783 	clz	r7, r3
 80002b6:	2f00      	cmp	r7, #0
 80002b8:	d148      	bne.n	800034c <__udivmoddi4+0x158>
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xd0>
 80002be:	4282      	cmp	r2, r0
 80002c0:	f200 80fb 	bhi.w	80004ba <__udivmoddi4+0x2c6>
 80002c4:	1a84      	subs	r4, r0, r2
 80002c6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	469c      	mov	ip, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d0e0      	beq.n	8000294 <__udivmoddi4+0xa0>
 80002d2:	e9c6 4c00 	strd	r4, ip, [r6]
 80002d6:	e7dd      	b.n	8000294 <__udivmoddi4+0xa0>
 80002d8:	b902      	cbnz	r2, 80002dc <__udivmoddi4+0xe8>
 80002da:	deff      	udf	#255	; 0xff
 80002dc:	fab2 f282 	clz	r2, r2
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f040 808f 	bne.w	8000404 <__udivmoddi4+0x210>
 80002e6:	2701      	movs	r7, #1
 80002e8:	1b49      	subs	r1, r1, r5
 80002ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002ee:	fa1f f985 	uxth.w	r9, r5
 80002f2:	fbb1 fef8 	udiv	lr, r1, r8
 80002f6:	fb08 111e 	mls	r1, r8, lr, r1
 80002fa:	fb09 f00e 	mul.w	r0, r9, lr
 80002fe:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000302:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000306:	4298      	cmp	r0, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x126>
 800030a:	18eb      	adds	r3, r5, r3
 800030c:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x124>
 8000312:	4298      	cmp	r0, r3
 8000314:	f200 80cd 	bhi.w	80004b2 <__udivmoddi4+0x2be>
 8000318:	468e      	mov	lr, r1
 800031a:	1a1b      	subs	r3, r3, r0
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	fb09 f900 	mul.w	r9, r9, r0
 8000328:	b2a4      	uxth	r4, r4
 800032a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800032e:	45a1      	cmp	r9, r4
 8000330:	d907      	bls.n	8000342 <__udivmoddi4+0x14e>
 8000332:	192c      	adds	r4, r5, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000338:	d202      	bcs.n	8000340 <__udivmoddi4+0x14c>
 800033a:	45a1      	cmp	r9, r4
 800033c:	f200 80b6 	bhi.w	80004ac <__udivmoddi4+0x2b8>
 8000340:	4618      	mov	r0, r3
 8000342:	eba4 0409 	sub.w	r4, r4, r9
 8000346:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800034a:	e79e      	b.n	800028a <__udivmoddi4+0x96>
 800034c:	f1c7 0520 	rsb	r5, r7, #32
 8000350:	40bb      	lsls	r3, r7
 8000352:	fa22 fc05 	lsr.w	ip, r2, r5
 8000356:	ea4c 0c03 	orr.w	ip, ip, r3
 800035a:	fa21 f405 	lsr.w	r4, r1, r5
 800035e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000362:	fbb4 f9fe 	udiv	r9, r4, lr
 8000366:	fa1f f88c 	uxth.w	r8, ip
 800036a:	fb0e 4419 	mls	r4, lr, r9, r4
 800036e:	fa20 f305 	lsr.w	r3, r0, r5
 8000372:	40b9      	lsls	r1, r7
 8000374:	fb09 fa08 	mul.w	sl, r9, r8
 8000378:	4319      	orrs	r1, r3
 800037a:	0c0b      	lsrs	r3, r1, #16
 800037c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000380:	45a2      	cmp	sl, r4
 8000382:	fa02 f207 	lsl.w	r2, r2, r7
 8000386:	fa00 f307 	lsl.w	r3, r0, r7
 800038a:	d90b      	bls.n	80003a4 <__udivmoddi4+0x1b0>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000394:	f080 8088 	bcs.w	80004a8 <__udivmoddi4+0x2b4>
 8000398:	45a2      	cmp	sl, r4
 800039a:	f240 8085 	bls.w	80004a8 <__udivmoddi4+0x2b4>
 800039e:	f1a9 0902 	sub.w	r9, r9, #2
 80003a2:	4464      	add	r4, ip
 80003a4:	eba4 040a 	sub.w	r4, r4, sl
 80003a8:	fbb4 f0fe 	udiv	r0, r4, lr
 80003ac:	fb0e 4410 	mls	r4, lr, r0, r4
 80003b0:	fb00 fa08 	mul.w	sl, r0, r8
 80003b4:	b289      	uxth	r1, r1
 80003b6:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80003ba:	45a2      	cmp	sl, r4
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x1dc>
 80003be:	eb1c 0404 	adds.w	r4, ip, r4
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003c6:	d26b      	bcs.n	80004a0 <__udivmoddi4+0x2ac>
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d969      	bls.n	80004a0 <__udivmoddi4+0x2ac>
 80003cc:	3802      	subs	r0, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d4:	fba0 8902 	umull	r8, r9, r0, r2
 80003d8:	eba4 040a 	sub.w	r4, r4, sl
 80003dc:	454c      	cmp	r4, r9
 80003de:	4641      	mov	r1, r8
 80003e0:	46ce      	mov	lr, r9
 80003e2:	d354      	bcc.n	800048e <__udivmoddi4+0x29a>
 80003e4:	d051      	beq.n	800048a <__udivmoddi4+0x296>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d069      	beq.n	80004be <__udivmoddi4+0x2ca>
 80003ea:	1a5a      	subs	r2, r3, r1
 80003ec:	eb64 040e 	sbc.w	r4, r4, lr
 80003f0:	fa04 f505 	lsl.w	r5, r4, r5
 80003f4:	fa22 f307 	lsr.w	r3, r2, r7
 80003f8:	40fc      	lsrs	r4, r7
 80003fa:	431d      	orrs	r5, r3
 80003fc:	e9c6 5400 	strd	r5, r4, [r6]
 8000400:	2700      	movs	r7, #0
 8000402:	e747      	b.n	8000294 <__udivmoddi4+0xa0>
 8000404:	4095      	lsls	r5, r2
 8000406:	f1c2 0320 	rsb	r3, r2, #32
 800040a:	fa21 f003 	lsr.w	r0, r1, r3
 800040e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000412:	fbb0 f7f8 	udiv	r7, r0, r8
 8000416:	fa1f f985 	uxth.w	r9, r5
 800041a:	fb08 0017 	mls	r0, r8, r7, r0
 800041e:	fa24 f303 	lsr.w	r3, r4, r3
 8000422:	4091      	lsls	r1, r2
 8000424:	fb07 fc09 	mul.w	ip, r7, r9
 8000428:	430b      	orrs	r3, r1
 800042a:	0c19      	lsrs	r1, r3, #16
 800042c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000430:	458c      	cmp	ip, r1
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d907      	bls.n	8000448 <__udivmoddi4+0x254>
 8000438:	1869      	adds	r1, r5, r1
 800043a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800043e:	d231      	bcs.n	80004a4 <__udivmoddi4+0x2b0>
 8000440:	458c      	cmp	ip, r1
 8000442:	d92f      	bls.n	80004a4 <__udivmoddi4+0x2b0>
 8000444:	3f02      	subs	r7, #2
 8000446:	4429      	add	r1, r5
 8000448:	eba1 010c 	sub.w	r1, r1, ip
 800044c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000450:	fb08 1c10 	mls	ip, r8, r0, r1
 8000454:	fb00 fe09 	mul.w	lr, r0, r9
 8000458:	b299      	uxth	r1, r3
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	458e      	cmp	lr, r1
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x27e>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000468:	d218      	bcs.n	800049c <__udivmoddi4+0x2a8>
 800046a:	458e      	cmp	lr, r1
 800046c:	d916      	bls.n	800049c <__udivmoddi4+0x2a8>
 800046e:	3802      	subs	r0, #2
 8000470:	4429      	add	r1, r5
 8000472:	eba1 010e 	sub.w	r1, r1, lr
 8000476:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047a:	e73a      	b.n	80002f2 <__udivmoddi4+0xfe>
 800047c:	4637      	mov	r7, r6
 800047e:	4630      	mov	r0, r6
 8000480:	e708      	b.n	8000294 <__udivmoddi4+0xa0>
 8000482:	460f      	mov	r7, r1
 8000484:	e6e6      	b.n	8000254 <__udivmoddi4+0x60>
 8000486:	4618      	mov	r0, r3
 8000488:	e6fb      	b.n	8000282 <__udivmoddi4+0x8e>
 800048a:	4543      	cmp	r3, r8
 800048c:	d2ab      	bcs.n	80003e6 <__udivmoddi4+0x1f2>
 800048e:	ebb8 0102 	subs.w	r1, r8, r2
 8000492:	eb69 020c 	sbc.w	r2, r9, ip
 8000496:	3801      	subs	r0, #1
 8000498:	4696      	mov	lr, r2
 800049a:	e7a4      	b.n	80003e6 <__udivmoddi4+0x1f2>
 800049c:	4618      	mov	r0, r3
 800049e:	e7e8      	b.n	8000472 <__udivmoddi4+0x27e>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e795      	b.n	80003d0 <__udivmoddi4+0x1dc>
 80004a4:	4607      	mov	r7, r0
 80004a6:	e7cf      	b.n	8000448 <__udivmoddi4+0x254>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e77b      	b.n	80003a4 <__udivmoddi4+0x1b0>
 80004ac:	3802      	subs	r0, #2
 80004ae:	442c      	add	r4, r5
 80004b0:	e747      	b.n	8000342 <__udivmoddi4+0x14e>
 80004b2:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b6:	442b      	add	r3, r5
 80004b8:	e72f      	b.n	800031a <__udivmoddi4+0x126>
 80004ba:	4638      	mov	r0, r7
 80004bc:	e707      	b.n	80002ce <__udivmoddi4+0xda>
 80004be:	4637      	mov	r7, r6
 80004c0:	e6e8      	b.n	8000294 <__udivmoddi4+0xa0>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 f93e 	bl	800074c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f805 	bl	80004de <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f848 	bl	8000568 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004d8:	f002 ffb2 	bl	8003440 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <main+0x14>

080004de <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004de:	b580      	push	{r7, lr}
 80004e0:	b092      	sub	sp, #72	; 0x48
 80004e2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e4:	f107 0318 	add.w	r3, r7, #24
 80004e8:	2230      	movs	r2, #48	; 0x30
 80004ea:	2100      	movs	r1, #0
 80004ec:	4618      	mov	r0, r3
 80004ee:	f003 fb47 	bl	8003b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000500:	2302      	movs	r3, #2
 8000502:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000504:	2301      	movs	r3, #1
 8000506:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000508:	2310      	movs	r3, #16
 800050a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800050c:	2302      	movs	r3, #2
 800050e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000510:	2300      	movs	r3, #0
 8000512:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000514:	2310      	movs	r3, #16
 8000516:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000518:	23c0      	movs	r3, #192	; 0xc0
 800051a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800051c:	2302      	movs	r3, #2
 800051e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000520:	2304      	movs	r3, #4
 8000522:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000524:	f107 0318 	add.w	r3, r7, #24
 8000528:	4618      	mov	r0, r3
 800052a:	f000 ff79 	bl	8001420 <HAL_RCC_OscConfig>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000534:	f000 f830 	bl	8000598 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000538:	230f      	movs	r3, #15
 800053a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800053c:	2300      	movs	r3, #0
 800053e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000540:	2300      	movs	r3, #0
 8000542:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000544:	2300      	movs	r3, #0
 8000546:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000548:	2300      	movs	r3, #0
 800054a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	2100      	movs	r1, #0
 8000550:	4618      	mov	r0, r3
 8000552:	f001 f9cf 	bl	80018f4 <HAL_RCC_ClockConfig>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800055c:	f000 f81c 	bl	8000598 <Error_Handler>
  }
}
 8000560:	bf00      	nop
 8000562:	3748      	adds	r7, #72	; 0x48
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	4b08      	ldr	r3, [pc, #32]	; (8000594 <MX_GPIO_Init+0x2c>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a07      	ldr	r2, [pc, #28]	; (8000594 <MX_GPIO_Init+0x2c>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b05      	ldr	r3, [pc, #20]	; (8000594 <MX_GPIO_Init+0x2c>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr
 8000594:	40023800 	.word	0x40023800

08000598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr

080005a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <HAL_MspInit+0x48>)
 80005b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005b2:	4a0e      	ldr	r2, [pc, #56]	; (80005ec <HAL_MspInit+0x48>)
 80005b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b8:	6453      	str	r3, [r2, #68]	; 0x44
 80005ba:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <HAL_MspInit+0x48>)
 80005bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	603b      	str	r3, [r7, #0]
 80005ca:	4b08      	ldr	r3, [pc, #32]	; (80005ec <HAL_MspInit+0x48>)
 80005cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ce:	4a07      	ldr	r2, [pc, #28]	; (80005ec <HAL_MspInit+0x48>)
 80005d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d4:	6413      	str	r3, [r2, #64]	; 0x40
 80005d6:	4b05      	ldr	r3, [pc, #20]	; (80005ec <HAL_MspInit+0x48>)
 80005d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr
 80005ec:	40023800 	.word	0x40023800

080005f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr

080005fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <HardFault_Handler+0x4>

08000602 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000606:	e7fe      	b.n	8000606 <MemManage_Handler+0x4>

08000608 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800060c:	e7fe      	b.n	800060c <BusFault_Handler+0x4>

0800060e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000612:	e7fe      	b.n	8000612 <UsageFault_Handler+0x4>

08000614 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr

08000620 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr

0800062c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr

08000638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800063c:	f000 f8d8 	bl	80007f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}

08000644 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <_sbrk+0x50>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d102      	bne.n	800065a <_sbrk+0x16>
		heap_end = &end;
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <_sbrk+0x50>)
 8000656:	4a10      	ldr	r2, [pc, #64]	; (8000698 <_sbrk+0x54>)
 8000658:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <_sbrk+0x50>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <_sbrk+0x50>)
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4413      	add	r3, r2
 8000668:	466a      	mov	r2, sp
 800066a:	4293      	cmp	r3, r2
 800066c:	d907      	bls.n	800067e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800066e:	f003 fa4d 	bl	8003b0c <__errno>
 8000672:	4602      	mov	r2, r0
 8000674:	230c      	movs	r3, #12
 8000676:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800067c:	e006      	b.n	800068c <_sbrk+0x48>
	}

	heap_end += incr;
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <_sbrk+0x50>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	4a03      	ldr	r2, [pc, #12]	; (8000694 <_sbrk+0x50>)
 8000688:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800068a:	68fb      	ldr	r3, [r7, #12]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	200001fc 	.word	0x200001fc
 8000698:	200012a8 	.word	0x200012a8

0800069c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <SystemInit+0x50>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a11      	ldr	r2, [pc, #68]	; (80006ec <SystemInit+0x50>)
 80006a6:	f043 0301 	orr.w	r3, r3, #1
 80006aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <SystemInit+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <SystemInit+0x50>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a0d      	ldr	r2, [pc, #52]	; (80006ec <SystemInit+0x50>)
 80006b8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80006bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006c0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <SystemInit+0x50>)
 80006c4:	4a0a      	ldr	r2, [pc, #40]	; (80006f0 <SystemInit+0x54>)
 80006c6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <SystemInit+0x50>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a07      	ldr	r2, [pc, #28]	; (80006ec <SystemInit+0x50>)
 80006ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <SystemInit+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <SystemInit+0x58>)
 80006dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006e0:	609a      	str	r2, [r3, #8]
#endif
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	24003010 	.word	0x24003010
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80006f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000730 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80006fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80006fe:	e003      	b.n	8000708 <LoopCopyDataInit>

08000700 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000702:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000704:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000706:	3104      	adds	r1, #4

08000708 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000708:	480b      	ldr	r0, [pc, #44]	; (8000738 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800070c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800070e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000710:	d3f6      	bcc.n	8000700 <CopyDataInit>
  ldr  r2, =_sbss
 8000712:	4a0b      	ldr	r2, [pc, #44]	; (8000740 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000714:	e002      	b.n	800071c <LoopFillZerobss>

08000716 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000716:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000718:	f842 3b04 	str.w	r3, [r2], #4

0800071c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800071e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000720:	d3f9      	bcc.n	8000716 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000722:	f7ff ffbb 	bl	800069c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000726:	f003 f9f7 	bl	8003b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800072a:	f7ff fecd 	bl	80004c8 <main>
  bx  lr    
 800072e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000730:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8000734:	08003d80 	.word	0x08003d80
  ldr  r0, =_sdata
 8000738:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800073c:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8000740:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8000744:	200012a4 	.word	0x200012a4

08000748 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000748:	e7fe      	b.n	8000748 <ADC_IRQHandler>
	...

0800074c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000750:	4b0e      	ldr	r3, [pc, #56]	; (800078c <HAL_Init+0x40>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a0d      	ldr	r2, [pc, #52]	; (800078c <HAL_Init+0x40>)
 8000756:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800075a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800075c:	4b0b      	ldr	r3, [pc, #44]	; (800078c <HAL_Init+0x40>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a0a      	ldr	r2, [pc, #40]	; (800078c <HAL_Init+0x40>)
 8000762:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000766:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <HAL_Init+0x40>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a07      	ldr	r2, [pc, #28]	; (800078c <HAL_Init+0x40>)
 800076e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000772:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000774:	2003      	movs	r0, #3
 8000776:	f000 f929 	bl	80009cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800077a:	2000      	movs	r0, #0
 800077c:	f000 f808 	bl	8000790 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000780:	f7ff ff10 	bl	80005a4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023c00 	.word	0x40023c00

08000790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <HAL_InitTick+0x54>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <HAL_InitTick+0x58>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4619      	mov	r1, r3
 80007a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 f933 	bl	8000a1a <HAL_SYSTICK_Config>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
 80007bc:	e00e      	b.n	80007dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2b0f      	cmp	r3, #15
 80007c2:	d80a      	bhi.n	80007da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c4:	2200      	movs	r2, #0
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007cc:	f000 f909 	bl	80009e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007d0:	4a06      	ldr	r2, [pc, #24]	; (80007ec <HAL_InitTick+0x5c>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007d6:	2300      	movs	r3, #0
 80007d8:	e000      	b.n	80007dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007da:	2301      	movs	r3, #1
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000000 	.word	0x20000000
 80007e8:	20000008 	.word	0x20000008
 80007ec:	20000004 	.word	0x20000004

080007f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <HAL_IncTick+0x1c>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b05      	ldr	r3, [pc, #20]	; (8000810 <HAL_IncTick+0x20>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4413      	add	r3, r2
 8000800:	4a03      	ldr	r2, [pc, #12]	; (8000810 <HAL_IncTick+0x20>)
 8000802:	6013      	str	r3, [r2, #0]
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	20000008 	.word	0x20000008
 8000810:	20000208 	.word	0x20000208

08000814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  return uwTick;
 8000818:	4b02      	ldr	r3, [pc, #8]	; (8000824 <HAL_GetTick+0x10>)
 800081a:	681b      	ldr	r3, [r3, #0]
}
 800081c:	4618      	mov	r0, r3
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	20000208 	.word	0x20000208

08000828 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000830:	f7ff fff0 	bl	8000814 <HAL_GetTick>
 8000834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000840:	d005      	beq.n	800084e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <HAL_Delay+0x40>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	461a      	mov	r2, r3
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	4413      	add	r3, r2
 800084c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800084e:	bf00      	nop
 8000850:	f7ff ffe0 	bl	8000814 <HAL_GetTick>
 8000854:	4602      	mov	r2, r0
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	68fa      	ldr	r2, [r7, #12]
 800085c:	429a      	cmp	r2, r3
 800085e:	d8f7      	bhi.n	8000850 <HAL_Delay+0x28>
  {
  }
}
 8000860:	bf00      	nop
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000008 	.word	0x20000008

0800086c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <__NVIC_SetPriorityGrouping+0x44>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000882:	68ba      	ldr	r2, [r7, #8]
 8000884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000888:	4013      	ands	r3, r2
 800088a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000894:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800089c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800089e:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <__NVIC_SetPriorityGrouping+0x44>)
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	60d3      	str	r3, [r2, #12]
}
 80008a4:	bf00      	nop
 80008a6:	3714      	adds	r7, #20
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008b8:	4b04      	ldr	r3, [pc, #16]	; (80008cc <__NVIC_GetPriorityGrouping+0x18>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	0a1b      	lsrs	r3, r3, #8
 80008be:	f003 0307 	and.w	r3, r3, #7
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	6039      	str	r1, [r7, #0]
 80008da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	db0a      	blt.n	80008fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	490c      	ldr	r1, [pc, #48]	; (800091c <__NVIC_SetPriority+0x4c>)
 80008ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ee:	0112      	lsls	r2, r2, #4
 80008f0:	b2d2      	uxtb	r2, r2
 80008f2:	440b      	add	r3, r1
 80008f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f8:	e00a      	b.n	8000910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4908      	ldr	r1, [pc, #32]	; (8000920 <__NVIC_SetPriority+0x50>)
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	f003 030f 	and.w	r3, r3, #15
 8000906:	3b04      	subs	r3, #4
 8000908:	0112      	lsls	r2, r2, #4
 800090a:	b2d2      	uxtb	r2, r2
 800090c:	440b      	add	r3, r1
 800090e:	761a      	strb	r2, [r3, #24]
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e000e100 	.word	0xe000e100
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000924:	b480      	push	{r7}
 8000926:	b089      	sub	sp, #36	; 0x24
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	f003 0307 	and.w	r3, r3, #7
 8000936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	f1c3 0307 	rsb	r3, r3, #7
 800093e:	2b04      	cmp	r3, #4
 8000940:	bf28      	it	cs
 8000942:	2304      	movcs	r3, #4
 8000944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	3304      	adds	r3, #4
 800094a:	2b06      	cmp	r3, #6
 800094c:	d902      	bls.n	8000954 <NVIC_EncodePriority+0x30>
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3b03      	subs	r3, #3
 8000952:	e000      	b.n	8000956 <NVIC_EncodePriority+0x32>
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000958:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	43da      	mvns	r2, r3
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	401a      	ands	r2, r3
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800096c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	fa01 f303 	lsl.w	r3, r1, r3
 8000976:	43d9      	mvns	r1, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800097c:	4313      	orrs	r3, r2
         );
}
 800097e:	4618      	mov	r0, r3
 8000980:	3724      	adds	r7, #36	; 0x24
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr

08000988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3b01      	subs	r3, #1
 8000994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000998:	d301      	bcc.n	800099e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800099a:	2301      	movs	r3, #1
 800099c:	e00f      	b.n	80009be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800099e:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <SysTick_Config+0x40>)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009a6:	210f      	movs	r1, #15
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009ac:	f7ff ff90 	bl	80008d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <SysTick_Config+0x40>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009b6:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <SysTick_Config+0x40>)
 80009b8:	2207      	movs	r2, #7
 80009ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	e000e010 	.word	0xe000e010

080009cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff ff49 	bl	800086c <__NVIC_SetPriorityGrouping>
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b086      	sub	sp, #24
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	4603      	mov	r3, r0
 80009ea:	60b9      	str	r1, [r7, #8]
 80009ec:	607a      	str	r2, [r7, #4]
 80009ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009f4:	f7ff ff5e 	bl	80008b4 <__NVIC_GetPriorityGrouping>
 80009f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	68b9      	ldr	r1, [r7, #8]
 80009fe:	6978      	ldr	r0, [r7, #20]
 8000a00:	f7ff ff90 	bl	8000924 <NVIC_EncodePriority>
 8000a04:	4602      	mov	r2, r0
 8000a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ff5f 	bl	80008d0 <__NVIC_SetPriority>
}
 8000a12:	bf00      	nop
 8000a14:	3718      	adds	r7, #24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f7ff ffb0 	bl	8000988 <SysTick_Config>
 8000a28:	4603      	mov	r3, r0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b087      	sub	sp, #28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a42:	e16f      	b.n	8000d24 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	2101      	movs	r1, #1
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a50:	4013      	ands	r3, r2
 8000a52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	f000 8161 	beq.w	8000d1e <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d00b      	beq.n	8000a7c <HAL_GPIO_Init+0x48>
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	d007      	beq.n	8000a7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a70:	2b11      	cmp	r3, #17
 8000a72:	d003      	beq.n	8000a7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	2b12      	cmp	r3, #18
 8000a7a:	d130      	bne.n	8000ade <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	2203      	movs	r2, #3
 8000a88:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	4013      	ands	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	68da      	ldr	r2, [r3, #12]
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	43db      	mvns	r3, r3
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	091b      	lsrs	r3, r3, #4
 8000ac8:	f003 0201 	and.w	r2, r3, #1
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	68db      	ldr	r3, [r3, #12]
 8000ae2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	2203      	movs	r2, #3
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	43db      	mvns	r3, r3
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	4013      	ands	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	689a      	ldr	r2, [r3, #8]
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d003      	beq.n	8000b1e <HAL_GPIO_Init+0xea>
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	2b12      	cmp	r3, #18
 8000b1c:	d123      	bne.n	8000b66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	08da      	lsrs	r2, r3, #3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	3208      	adds	r2, #8
 8000b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	220f      	movs	r2, #15
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	43db      	mvns	r3, r3
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	691a      	ldr	r2, [r3, #16]
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	f003 0307 	and.w	r3, r3, #7
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	08da      	lsrs	r2, r3, #3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3208      	adds	r2, #8
 8000b60:	6939      	ldr	r1, [r7, #16]
 8000b62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	2203      	movs	r2, #3
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43db      	mvns	r3, r3
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	f003 0203 	and.w	r2, r3, #3
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	f000 80bb 	beq.w	8000d1e <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	4b64      	ldr	r3, [pc, #400]	; (8000d40 <HAL_GPIO_Init+0x30c>)
 8000bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb0:	4a63      	ldr	r2, [pc, #396]	; (8000d40 <HAL_GPIO_Init+0x30c>)
 8000bb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb6:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb8:	4b61      	ldr	r3, [pc, #388]	; (8000d40 <HAL_GPIO_Init+0x30c>)
 8000bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bc4:	4a5f      	ldr	r2, [pc, #380]	; (8000d44 <HAL_GPIO_Init+0x310>)
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	089b      	lsrs	r3, r3, #2
 8000bca:	3302      	adds	r3, #2
 8000bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	f003 0303 	and.w	r3, r3, #3
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	220f      	movs	r2, #15
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	43db      	mvns	r3, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4013      	ands	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a57      	ldr	r2, [pc, #348]	; (8000d48 <HAL_GPIO_Init+0x314>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d031      	beq.n	8000c54 <HAL_GPIO_Init+0x220>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a56      	ldr	r2, [pc, #344]	; (8000d4c <HAL_GPIO_Init+0x318>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d02b      	beq.n	8000c50 <HAL_GPIO_Init+0x21c>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a55      	ldr	r2, [pc, #340]	; (8000d50 <HAL_GPIO_Init+0x31c>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d025      	beq.n	8000c4c <HAL_GPIO_Init+0x218>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a54      	ldr	r2, [pc, #336]	; (8000d54 <HAL_GPIO_Init+0x320>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d01f      	beq.n	8000c48 <HAL_GPIO_Init+0x214>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4a53      	ldr	r2, [pc, #332]	; (8000d58 <HAL_GPIO_Init+0x324>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d019      	beq.n	8000c44 <HAL_GPIO_Init+0x210>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a52      	ldr	r2, [pc, #328]	; (8000d5c <HAL_GPIO_Init+0x328>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d013      	beq.n	8000c40 <HAL_GPIO_Init+0x20c>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a51      	ldr	r2, [pc, #324]	; (8000d60 <HAL_GPIO_Init+0x32c>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d00d      	beq.n	8000c3c <HAL_GPIO_Init+0x208>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a50      	ldr	r2, [pc, #320]	; (8000d64 <HAL_GPIO_Init+0x330>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d007      	beq.n	8000c38 <HAL_GPIO_Init+0x204>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a4f      	ldr	r2, [pc, #316]	; (8000d68 <HAL_GPIO_Init+0x334>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d101      	bne.n	8000c34 <HAL_GPIO_Init+0x200>
 8000c30:	2308      	movs	r3, #8
 8000c32:	e010      	b.n	8000c56 <HAL_GPIO_Init+0x222>
 8000c34:	2309      	movs	r3, #9
 8000c36:	e00e      	b.n	8000c56 <HAL_GPIO_Init+0x222>
 8000c38:	2307      	movs	r3, #7
 8000c3a:	e00c      	b.n	8000c56 <HAL_GPIO_Init+0x222>
 8000c3c:	2306      	movs	r3, #6
 8000c3e:	e00a      	b.n	8000c56 <HAL_GPIO_Init+0x222>
 8000c40:	2305      	movs	r3, #5
 8000c42:	e008      	b.n	8000c56 <HAL_GPIO_Init+0x222>
 8000c44:	2304      	movs	r3, #4
 8000c46:	e006      	b.n	8000c56 <HAL_GPIO_Init+0x222>
 8000c48:	2303      	movs	r3, #3
 8000c4a:	e004      	b.n	8000c56 <HAL_GPIO_Init+0x222>
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	e002      	b.n	8000c56 <HAL_GPIO_Init+0x222>
 8000c50:	2301      	movs	r3, #1
 8000c52:	e000      	b.n	8000c56 <HAL_GPIO_Init+0x222>
 8000c54:	2300      	movs	r3, #0
 8000c56:	697a      	ldr	r2, [r7, #20]
 8000c58:	f002 0203 	and.w	r2, r2, #3
 8000c5c:	0092      	lsls	r2, r2, #2
 8000c5e:	4093      	lsls	r3, r2
 8000c60:	461a      	mov	r2, r3
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c68:	4936      	ldr	r1, [pc, #216]	; (8000d44 <HAL_GPIO_Init+0x310>)
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	089b      	lsrs	r3, r3, #2
 8000c6e:	3302      	adds	r3, #2
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c76:	4b3d      	ldr	r3, [pc, #244]	; (8000d6c <HAL_GPIO_Init+0x338>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	4013      	ands	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d003      	beq.n	8000c9a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c9a:	4a34      	ldr	r2, [pc, #208]	; (8000d6c <HAL_GPIO_Init+0x338>)
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ca0:	4b32      	ldr	r3, [pc, #200]	; (8000d6c <HAL_GPIO_Init+0x338>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d003      	beq.n	8000cc4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cc4:	4a29      	ldr	r2, [pc, #164]	; (8000d6c <HAL_GPIO_Init+0x338>)
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cca:	4b28      	ldr	r3, [pc, #160]	; (8000d6c <HAL_GPIO_Init+0x338>)
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d003      	beq.n	8000cee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cee:	4a1f      	ldr	r2, [pc, #124]	; (8000d6c <HAL_GPIO_Init+0x338>)
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cf4:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <HAL_GPIO_Init+0x338>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4013      	ands	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d003      	beq.n	8000d18 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d18:	4a14      	ldr	r2, [pc, #80]	; (8000d6c <HAL_GPIO_Init+0x338>)
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	3301      	adds	r3, #1
 8000d22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f47f ae88 	bne.w	8000a44 <HAL_GPIO_Init+0x10>
  }
}
 8000d34:	bf00      	nop
 8000d36:	371c      	adds	r7, #28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40013800 	.word	0x40013800
 8000d48:	40020000 	.word	0x40020000
 8000d4c:	40020400 	.word	0x40020400
 8000d50:	40020800 	.word	0x40020800
 8000d54:	40020c00 	.word	0x40020c00
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40021400 	.word	0x40021400
 8000d60:	40021800 	.word	0x40021800
 8000d64:	40021c00 	.word	0x40021c00
 8000d68:	40022000 	.word	0x40022000
 8000d6c:	40013c00 	.word	0x40013c00

08000d70 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d72:	b08f      	sub	sp, #60	; 0x3c
 8000d74:	af0a      	add	r7, sp, #40	; 0x28
 8000d76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d101      	bne.n	8000d82 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e10f      	b.n	8000fa2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d106      	bne.n	8000da2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2200      	movs	r2, #0
 8000d98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f002 fd1b 	bl	80037d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2203      	movs	r2, #3
 8000da6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d102      	bne.n	8000dbc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f000 ff9c 	bl	8001cfe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	687e      	ldr	r6, [r7, #4]
 8000dce:	466d      	mov	r5, sp
 8000dd0:	f106 0410 	add.w	r4, r6, #16
 8000dd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ddc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000de0:	e885 0003 	stmia.w	r5, {r0, r1}
 8000de4:	1d33      	adds	r3, r6, #4
 8000de6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000de8:	6838      	ldr	r0, [r7, #0]
 8000dea:	f000 ff21 	bl	8001c30 <USB_CoreInit>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d005      	beq.n	8000e00 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2202      	movs	r2, #2
 8000df8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e0d0      	b.n	8000fa2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 ff89 	bl	8001d1e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	73fb      	strb	r3, [r7, #15]
 8000e10:	e04a      	b.n	8000ea8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e12:	7bfa      	ldrb	r2, [r7, #15]
 8000e14:	6879      	ldr	r1, [r7, #4]
 8000e16:	4613      	mov	r3, r2
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	1a9b      	subs	r3, r3, r2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	440b      	add	r3, r1
 8000e20:	333d      	adds	r3, #61	; 0x3d
 8000e22:	2201      	movs	r2, #1
 8000e24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e26:	7bfa      	ldrb	r2, [r7, #15]
 8000e28:	6879      	ldr	r1, [r7, #4]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	1a9b      	subs	r3, r3, r2
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	440b      	add	r3, r1
 8000e34:	333c      	adds	r3, #60	; 0x3c
 8000e36:	7bfa      	ldrb	r2, [r7, #15]
 8000e38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e3a:	7bfa      	ldrb	r2, [r7, #15]
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
 8000e3e:	b298      	uxth	r0, r3
 8000e40:	6879      	ldr	r1, [r7, #4]
 8000e42:	4613      	mov	r3, r2
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	1a9b      	subs	r3, r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	3342      	adds	r3, #66	; 0x42
 8000e4e:	4602      	mov	r2, r0
 8000e50:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e52:	7bfa      	ldrb	r2, [r7, #15]
 8000e54:	6879      	ldr	r1, [r7, #4]
 8000e56:	4613      	mov	r3, r2
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	1a9b      	subs	r3, r3, r2
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	440b      	add	r3, r1
 8000e60:	333f      	adds	r3, #63	; 0x3f
 8000e62:	2200      	movs	r2, #0
 8000e64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e66:	7bfa      	ldrb	r2, [r7, #15]
 8000e68:	6879      	ldr	r1, [r7, #4]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	1a9b      	subs	r3, r3, r2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	440b      	add	r3, r1
 8000e74:	3344      	adds	r3, #68	; 0x44
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e7a:	7bfa      	ldrb	r2, [r7, #15]
 8000e7c:	6879      	ldr	r1, [r7, #4]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	440b      	add	r3, r1
 8000e88:	3348      	adds	r3, #72	; 0x48
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e8e:	7bfa      	ldrb	r2, [r7, #15]
 8000e90:	6879      	ldr	r1, [r7, #4]
 8000e92:	4613      	mov	r3, r2
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	1a9b      	subs	r3, r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	3350      	adds	r3, #80	; 0x50
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	73fb      	strb	r3, [r7, #15]
 8000ea8:	7bfa      	ldrb	r2, [r7, #15]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d3af      	bcc.n	8000e12 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	73fb      	strb	r3, [r7, #15]
 8000eb6:	e044      	b.n	8000f42 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000eb8:	7bfa      	ldrb	r2, [r7, #15]
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	1a9b      	subs	r3, r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	440b      	add	r3, r1
 8000ec6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000ece:	7bfa      	ldrb	r2, [r7, #15]
 8000ed0:	6879      	ldr	r1, [r7, #4]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	1a9b      	subs	r3, r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	440b      	add	r3, r1
 8000edc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000ee0:	7bfa      	ldrb	r2, [r7, #15]
 8000ee2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000ee4:	7bfa      	ldrb	r2, [r7, #15]
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	1a9b      	subs	r3, r3, r2
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000efa:	7bfa      	ldrb	r2, [r7, #15]
 8000efc:	6879      	ldr	r1, [r7, #4]
 8000efe:	4613      	mov	r3, r2
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	1a9b      	subs	r3, r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	440b      	add	r3, r1
 8000f08:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f10:	7bfa      	ldrb	r2, [r7, #15]
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	4613      	mov	r3, r2
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	1a9b      	subs	r3, r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f26:	7bfa      	ldrb	r2, [r7, #15]
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	1a9b      	subs	r3, r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	440b      	add	r3, r1
 8000f34:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	73fb      	strb	r3, [r7, #15]
 8000f42:	7bfa      	ldrb	r2, [r7, #15]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d3b5      	bcc.n	8000eb8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	603b      	str	r3, [r7, #0]
 8000f52:	687e      	ldr	r6, [r7, #4]
 8000f54:	466d      	mov	r5, sp
 8000f56:	f106 0410 	add.w	r4, r6, #16
 8000f5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f66:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f6a:	1d33      	adds	r3, r6, #4
 8000f6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f6e:	6838      	ldr	r0, [r7, #0]
 8000f70:	f000 ff00 	bl	8001d74 <USB_DevInit>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d005      	beq.n	8000f86 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00d      	b.n	8000fa2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2201      	movs	r2, #1
 8000f92:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f001 fe11 	bl	8002bc2 <USB_DevDisconnect>

  return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3714      	adds	r7, #20
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000faa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d101      	bne.n	8000fc0 <HAL_PCD_Start+0x16>
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	e012      	b.n	8000fe6 <HAL_PCD_Start+0x3c>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f001 fde0 	bl	8002b92 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 fe81 	bl	8001cde <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b084      	sub	sp, #16
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	70fb      	strb	r3, [r7, #3]
 8001000:	460b      	mov	r3, r1
 8001002:	803b      	strh	r3, [r7, #0]
 8001004:	4613      	mov	r3, r2
 8001006:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001008:	2300      	movs	r3, #0
 800100a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800100c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001010:	2b00      	cmp	r3, #0
 8001012:	da0f      	bge.n	8001034 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	f003 020f 	and.w	r2, r3, #15
 800101a:	4613      	mov	r3, r2
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	1a9b      	subs	r3, r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	3338      	adds	r3, #56	; 0x38
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	4413      	add	r3, r2
 8001028:	3304      	adds	r3, #4
 800102a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2201      	movs	r2, #1
 8001030:	705a      	strb	r2, [r3, #1]
 8001032:	e00f      	b.n	8001054 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001034:	78fb      	ldrb	r3, [r7, #3]
 8001036:	f003 020f 	and.w	r2, r3, #15
 800103a:	4613      	mov	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	1a9b      	subs	r3, r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	3304      	adds	r3, #4
 800104c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2200      	movs	r2, #0
 8001052:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001054:	78fb      	ldrb	r3, [r7, #3]
 8001056:	f003 030f 	and.w	r3, r3, #15
 800105a:	b2da      	uxtb	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001060:	883a      	ldrh	r2, [r7, #0]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	78ba      	ldrb	r2, [r7, #2]
 800106a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	785b      	ldrb	r3, [r3, #1]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d004      	beq.n	800107e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	b29a      	uxth	r2, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800107e:	78bb      	ldrb	r3, [r7, #2]
 8001080:	2b02      	cmp	r3, #2
 8001082:	d102      	bne.n	800108a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2200      	movs	r2, #0
 8001088:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001090:	2b01      	cmp	r3, #1
 8001092:	d101      	bne.n	8001098 <HAL_PCD_EP_Open+0xaa>
 8001094:	2302      	movs	r3, #2
 8001096:	e00e      	b.n	80010b6 <HAL_PCD_EP_Open+0xc8>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2201      	movs	r2, #1
 800109c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	68f9      	ldr	r1, [r7, #12]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f001 f832 	bl	8002110 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80010b4:	7afb      	ldrb	r3, [r7, #11]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b084      	sub	sp, #16
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	460b      	mov	r3, r1
 80010c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80010ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	da0f      	bge.n	80010f2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010d2:	78fb      	ldrb	r3, [r7, #3]
 80010d4:	f003 020f 	and.w	r2, r3, #15
 80010d8:	4613      	mov	r3, r2
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	1a9b      	subs	r3, r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	3338      	adds	r3, #56	; 0x38
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	3304      	adds	r3, #4
 80010e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2201      	movs	r2, #1
 80010ee:	705a      	strb	r2, [r3, #1]
 80010f0:	e00f      	b.n	8001112 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010f2:	78fb      	ldrb	r3, [r7, #3]
 80010f4:	f003 020f 	and.w	r2, r3, #15
 80010f8:	4613      	mov	r3, r2
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	1a9b      	subs	r3, r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	4413      	add	r3, r2
 8001108:	3304      	adds	r3, #4
 800110a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2200      	movs	r2, #0
 8001110:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001112:	78fb      	ldrb	r3, [r7, #3]
 8001114:	f003 030f 	and.w	r3, r3, #15
 8001118:	b2da      	uxtb	r2, r3
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001124:	2b01      	cmp	r3, #1
 8001126:	d101      	bne.n	800112c <HAL_PCD_EP_Close+0x6e>
 8001128:	2302      	movs	r3, #2
 800112a:	e00e      	b.n	800114a <HAL_PCD_EP_Close+0x8c>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2201      	movs	r2, #1
 8001130:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	68f9      	ldr	r1, [r7, #12]
 800113a:	4618      	mov	r0, r3
 800113c:	f001 f86e 	bl	800221c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b086      	sub	sp, #24
 8001156:	af00      	add	r7, sp, #0
 8001158:	60f8      	str	r0, [r7, #12]
 800115a:	607a      	str	r2, [r7, #4]
 800115c:	603b      	str	r3, [r7, #0]
 800115e:	460b      	mov	r3, r1
 8001160:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001162:	7afb      	ldrb	r3, [r7, #11]
 8001164:	f003 020f 	and.w	r2, r3, #15
 8001168:	4613      	mov	r3, r2
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	1a9b      	subs	r3, r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001174:	68fa      	ldr	r2, [r7, #12]
 8001176:	4413      	add	r3, r2
 8001178:	3304      	adds	r3, #4
 800117a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	2200      	movs	r2, #0
 800118c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	2200      	movs	r2, #0
 8001192:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001194:	7afb      	ldrb	r3, [r7, #11]
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	b2da      	uxtb	r2, r3
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d102      	bne.n	80011ae <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80011ae:	7afb      	ldrb	r3, [r7, #11]
 80011b0:	f003 030f 	and.w	r3, r3, #15
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d109      	bne.n	80011cc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6818      	ldr	r0, [r3, #0]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	461a      	mov	r2, r3
 80011c4:	6979      	ldr	r1, [r7, #20]
 80011c6:	f001 faf1 	bl	80027ac <USB_EP0StartXfer>
 80011ca:	e008      	b.n	80011de <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6818      	ldr	r0, [r3, #0]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	461a      	mov	r2, r3
 80011d8:	6979      	ldr	r1, [r7, #20]
 80011da:	f001 f8a3 	bl	8002324 <USB_EPStartXfer>
  }

  return HAL_OK;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80011f4:	78fb      	ldrb	r3, [r7, #3]
 80011f6:	f003 020f 	and.w	r2, r3, #15
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	4613      	mov	r3, r2
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	1a9b      	subs	r3, r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	440b      	add	r3, r1
 8001206:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800120a:	681b      	ldr	r3, [r3, #0]
}
 800120c:	4618      	mov	r0, r3
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr

08001216 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b086      	sub	sp, #24
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	607a      	str	r2, [r7, #4]
 8001220:	603b      	str	r3, [r7, #0]
 8001222:	460b      	mov	r3, r1
 8001224:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001226:	7afb      	ldrb	r3, [r7, #11]
 8001228:	f003 020f 	and.w	r2, r3, #15
 800122c:	4613      	mov	r3, r2
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	1a9b      	subs	r3, r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	3338      	adds	r3, #56	; 0x38
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	4413      	add	r3, r2
 800123a:	3304      	adds	r3, #4
 800123c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	2201      	movs	r2, #1
 8001254:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001256:	7afb      	ldrb	r3, [r7, #11]
 8001258:	f003 030f 	and.w	r3, r3, #15
 800125c:	b2da      	uxtb	r2, r3
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d102      	bne.n	8001270 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001270:	7afb      	ldrb	r3, [r7, #11]
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	2b00      	cmp	r3, #0
 8001278:	d109      	bne.n	800128e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6818      	ldr	r0, [r3, #0]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	b2db      	uxtb	r3, r3
 8001284:	461a      	mov	r2, r3
 8001286:	6979      	ldr	r1, [r7, #20]
 8001288:	f001 fa90 	bl	80027ac <USB_EP0StartXfer>
 800128c:	e008      	b.n	80012a0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6818      	ldr	r0, [r3, #0]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	461a      	mov	r2, r3
 800129a:	6979      	ldr	r1, [r7, #20]
 800129c:	f001 f842 	bl	8002324 <USB_EPStartXfer>
  }

  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b084      	sub	sp, #16
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
 80012b2:	460b      	mov	r3, r1
 80012b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80012b6:	78fb      	ldrb	r3, [r7, #3]
 80012b8:	f003 020f 	and.w	r2, r3, #15
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d901      	bls.n	80012c8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e050      	b.n	800136a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80012c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	da0f      	bge.n	80012f0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012d0:	78fb      	ldrb	r3, [r7, #3]
 80012d2:	f003 020f 	and.w	r2, r3, #15
 80012d6:	4613      	mov	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	1a9b      	subs	r3, r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	3338      	adds	r3, #56	; 0x38
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	4413      	add	r3, r2
 80012e4:	3304      	adds	r3, #4
 80012e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2201      	movs	r2, #1
 80012ec:	705a      	strb	r2, [r3, #1]
 80012ee:	e00d      	b.n	800130c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80012f0:	78fa      	ldrb	r2, [r7, #3]
 80012f2:	4613      	mov	r3, r2
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	1a9b      	subs	r3, r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	3304      	adds	r3, #4
 8001304:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2200      	movs	r2, #0
 800130a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2201      	movs	r2, #1
 8001310:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001312:	78fb      	ldrb	r3, [r7, #3]
 8001314:	f003 030f 	and.w	r3, r3, #15
 8001318:	b2da      	uxtb	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001324:	2b01      	cmp	r3, #1
 8001326:	d101      	bne.n	800132c <HAL_PCD_EP_SetStall+0x82>
 8001328:	2302      	movs	r3, #2
 800132a:	e01e      	b.n	800136a <HAL_PCD_EP_SetStall+0xc0>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2201      	movs	r2, #1
 8001330:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68f9      	ldr	r1, [r7, #12]
 800133a:	4618      	mov	r0, r3
 800133c:	f001 fbbc 	bl	8002ab8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001340:	78fb      	ldrb	r3, [r7, #3]
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10a      	bne.n	8001360 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6818      	ldr	r0, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	b2d9      	uxtb	r1, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800135a:	461a      	mov	r2, r3
 800135c:	f001 fc4a 	bl	8002bf4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001372:	b480      	push	{r7}
 8001374:	b085      	sub	sp, #20
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	460b      	mov	r3, r1
 800137c:	70fb      	strb	r3, [r7, #3]
 800137e:	4613      	mov	r3, r2
 8001380:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001388:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800138a:	78fb      	ldrb	r3, [r7, #3]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d107      	bne.n	80013a0 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001390:	883b      	ldrh	r3, [r7, #0]
 8001392:	0419      	lsls	r1, r3, #16
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	68ba      	ldr	r2, [r7, #8]
 800139a:	430a      	orrs	r2, r1
 800139c:	629a      	str	r2, [r3, #40]	; 0x28
 800139e:	e028      	b.n	80013f2 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a6:	0c1b      	lsrs	r3, r3, #16
 80013a8:	68ba      	ldr	r2, [r7, #8]
 80013aa:	4413      	add	r3, r2
 80013ac:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	73fb      	strb	r3, [r7, #15]
 80013b2:	e00d      	b.n	80013d0 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	3340      	adds	r3, #64	; 0x40
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	0c1b      	lsrs	r3, r3, #16
 80013c4:	68ba      	ldr	r2, [r7, #8]
 80013c6:	4413      	add	r3, r2
 80013c8:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	3301      	adds	r3, #1
 80013ce:	73fb      	strb	r3, [r7, #15]
 80013d0:	7bfa      	ldrb	r2, [r7, #15]
 80013d2:	78fb      	ldrb	r3, [r7, #3]
 80013d4:	3b01      	subs	r3, #1
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d3ec      	bcc.n	80013b4 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80013da:	883b      	ldrh	r3, [r7, #0]
 80013dc:	0418      	lsls	r0, r3, #16
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6819      	ldr	r1, [r3, #0]
 80013e2:	78fb      	ldrb	r3, [r7, #3]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	4302      	orrs	r2, r0
 80013ea:	3340      	adds	r3, #64	; 0x40
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	440b      	add	r3, r1
 80013f0:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr

080013fe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	460b      	mov	r3, r1
 8001408:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	887a      	ldrh	r2, [r7, #2]
 8001410:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr
	...

08001420 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b090      	sub	sp, #64	; 0x40
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e253      	b.n	80018da <HAL_RCC_OscConfig+0x4ba>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	2b00      	cmp	r3, #0
 800143c:	d050      	beq.n	80014e0 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800143e:	4ba3      	ldr	r3, [pc, #652]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 030c 	and.w	r3, r3, #12
 8001446:	2b04      	cmp	r3, #4
 8001448:	d00c      	beq.n	8001464 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800144a:	4ba0      	ldr	r3, [pc, #640]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001452:	2b08      	cmp	r3, #8
 8001454:	d112      	bne.n	800147c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001456:	4b9d      	ldr	r3, [pc, #628]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800145e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001462:	d10b      	bne.n	800147c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001464:	4b99      	ldr	r3, [pc, #612]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d036      	beq.n	80014de <HAL_RCC_OscConfig+0xbe>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d132      	bne.n	80014de <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e22e      	b.n	80018da <HAL_RCC_OscConfig+0x4ba>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	4b93      	ldr	r3, [pc, #588]	; (80016d0 <HAL_RCC_OscConfig+0x2b0>)
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d013      	beq.n	80014b6 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148e:	f7ff f9c1 	bl	8000814 <HAL_GetTick>
 8001492:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001496:	f7ff f9bd 	bl	8000814 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b64      	cmp	r3, #100	; 0x64
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e218      	b.n	80018da <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a8:	4b88      	ldr	r3, [pc, #544]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0f0      	beq.n	8001496 <HAL_RCC_OscConfig+0x76>
 80014b4:	e014      	b.n	80014e0 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b6:	f7ff f9ad 	bl	8000814 <HAL_GetTick>
 80014ba:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014be:	f7ff f9a9 	bl	8000814 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b64      	cmp	r3, #100	; 0x64
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e204      	b.n	80018da <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014d0:	4b7e      	ldr	r3, [pc, #504]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1f0      	bne.n	80014be <HAL_RCC_OscConfig+0x9e>
 80014dc:	e000      	b.n	80014e0 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014de:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d077      	beq.n	80015dc <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014ec:	4b77      	ldr	r3, [pc, #476]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f003 030c 	and.w	r3, r3, #12
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d00b      	beq.n	8001510 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014f8:	4b74      	ldr	r3, [pc, #464]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001500:	2b08      	cmp	r3, #8
 8001502:	d126      	bne.n	8001552 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001504:	4b71      	ldr	r3, [pc, #452]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d120      	bne.n	8001552 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001510:	4b6e      	ldr	r3, [pc, #440]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d005      	beq.n	8001528 <HAL_RCC_OscConfig+0x108>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d001      	beq.n	8001528 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e1d8      	b.n	80018da <HAL_RCC_OscConfig+0x4ba>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001528:	4b68      	ldr	r3, [pc, #416]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	21f8      	movs	r1, #248	; 0xf8
 8001536:	6339      	str	r1, [r7, #48]	; 0x30
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001538:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800153a:	fa91 f1a1 	rbit	r1, r1
 800153e:	62f9      	str	r1, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001540:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001542:	fab1 f181 	clz	r1, r1
 8001546:	b2c9      	uxtb	r1, r1
 8001548:	408b      	lsls	r3, r1
 800154a:	4960      	ldr	r1, [pc, #384]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 800154c:	4313      	orrs	r3, r2
 800154e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001550:	e044      	b.n	80015dc <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d02a      	beq.n	80015b0 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800155a:	4b5e      	ldr	r3, [pc, #376]	; (80016d4 <HAL_RCC_OscConfig+0x2b4>)
 800155c:	2201      	movs	r2, #1
 800155e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7ff f958 	bl	8000814 <HAL_GetTick>
 8001564:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001568:	f7ff f954 	bl	8000814 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e1af      	b.n	80018da <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157a:	4b54      	ldr	r3, [pc, #336]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f0      	beq.n	8001568 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001586:	4b51      	ldr	r3, [pc, #324]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	21f8      	movs	r1, #248	; 0xf8
 8001594:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001596:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001598:	fa91 f1a1 	rbit	r1, r1
 800159c:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 800159e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015a0:	fab1 f181 	clz	r1, r1
 80015a4:	b2c9      	uxtb	r1, r1
 80015a6:	408b      	lsls	r3, r1
 80015a8:	4948      	ldr	r1, [pc, #288]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	600b      	str	r3, [r1, #0]
 80015ae:	e015      	b.n	80015dc <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b0:	4b48      	ldr	r3, [pc, #288]	; (80016d4 <HAL_RCC_OscConfig+0x2b4>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b6:	f7ff f92d 	bl	8000814 <HAL_GetTick>
 80015ba:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015be:	f7ff f929 	bl	8000814 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e184      	b.n	80018da <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d0:	4b3e      	ldr	r3, [pc, #248]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1f0      	bne.n	80015be <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0308 	and.w	r3, r3, #8
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d030      	beq.n	800164a <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d016      	beq.n	800161e <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015f0:	4b39      	ldr	r3, [pc, #228]	; (80016d8 <HAL_RCC_OscConfig+0x2b8>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f6:	f7ff f90d 	bl	8000814 <HAL_GetTick>
 80015fa:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015fe:	f7ff f909 	bl	8000814 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e164      	b.n	80018da <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001610:	4b2e      	ldr	r3, [pc, #184]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 8001612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f0      	beq.n	80015fe <HAL_RCC_OscConfig+0x1de>
 800161c:	e015      	b.n	800164a <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800161e:	4b2e      	ldr	r3, [pc, #184]	; (80016d8 <HAL_RCC_OscConfig+0x2b8>)
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001624:	f7ff f8f6 	bl	8000814 <HAL_GetTick>
 8001628:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800162c:	f7ff f8f2 	bl	8000814 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e14d      	b.n	80018da <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800163e:	4b23      	ldr	r3, [pc, #140]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 8001640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f0      	bne.n	800162c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0304 	and.w	r3, r3, #4
 8001652:	2b00      	cmp	r3, #0
 8001654:	f000 8088 	beq.w	8001768 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001658:	2300      	movs	r3, #0
 800165a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800165e:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d110      	bne.n	800168c <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	4b17      	ldr	r3, [pc, #92]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	4a16      	ldr	r2, [pc, #88]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 8001674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001678:	6413      	str	r3, [r2, #64]	; 0x40
 800167a:	4b14      	ldr	r3, [pc, #80]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001686:	2301      	movs	r3, #1
 8001688:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <HAL_RCC_OscConfig+0x2bc>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a12      	ldr	r2, [pc, #72]	; (80016dc <HAL_RCC_OscConfig+0x2bc>)
 8001692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001696:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001698:	4b10      	ldr	r3, [pc, #64]	; (80016dc <HAL_RCC_OscConfig+0x2bc>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d123      	bne.n	80016ec <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016a4:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <HAL_RCC_OscConfig+0x2bc>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a0c      	ldr	r2, [pc, #48]	; (80016dc <HAL_RCC_OscConfig+0x2bc>)
 80016aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016b0:	f7ff f8b0 	bl	8000814 <HAL_GetTick>
 80016b4:	63b8      	str	r0, [r7, #56]	; 0x38

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b6:	e013      	b.n	80016e0 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b8:	f7ff f8ac 	bl	8000814 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d90c      	bls.n	80016e0 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e107      	b.n	80018da <HAL_RCC_OscConfig+0x4ba>
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40023802 	.word	0x40023802
 80016d4:	42470000 	.word	0x42470000
 80016d8:	42470e80 	.word	0x42470e80
 80016dc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e0:	4b80      	ldr	r3, [pc, #512]	; (80018e4 <HAL_RCC_OscConfig+0x4c4>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0e5      	beq.n	80016b8 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	4b7d      	ldr	r3, [pc, #500]	; (80018e8 <HAL_RCC_OscConfig+0x4c8>)
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d015      	beq.n	800172a <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fe:	f7ff f889 	bl	8000814 <HAL_GetTick>
 8001702:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001704:	e00a      	b.n	800171c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001706:	f7ff f885 	bl	8000814 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	f241 3288 	movw	r2, #5000	; 0x1388
 8001714:	4293      	cmp	r3, r2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e0de      	b.n	80018da <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800171c:	4b73      	ldr	r3, [pc, #460]	; (80018ec <HAL_RCC_OscConfig+0x4cc>)
 800171e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0ee      	beq.n	8001706 <HAL_RCC_OscConfig+0x2e6>
 8001728:	e014      	b.n	8001754 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172a:	f7ff f873 	bl	8000814 <HAL_GetTick>
 800172e:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001730:	e00a      	b.n	8001748 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001732:	f7ff f86f 	bl	8000814 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001740:	4293      	cmp	r3, r2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e0c8      	b.n	80018da <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001748:	4b68      	ldr	r3, [pc, #416]	; (80018ec <HAL_RCC_OscConfig+0x4cc>)
 800174a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1ee      	bne.n	8001732 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001754:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001758:	2b01      	cmp	r3, #1
 800175a:	d105      	bne.n	8001768 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800175c:	4b63      	ldr	r3, [pc, #396]	; (80018ec <HAL_RCC_OscConfig+0x4cc>)
 800175e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001760:	4a62      	ldr	r2, [pc, #392]	; (80018ec <HAL_RCC_OscConfig+0x4cc>)
 8001762:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001766:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	2b00      	cmp	r3, #0
 800176e:	f000 80b3 	beq.w	80018d8 <HAL_RCC_OscConfig+0x4b8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001772:	4b5e      	ldr	r3, [pc, #376]	; (80018ec <HAL_RCC_OscConfig+0x4cc>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 030c 	and.w	r3, r3, #12
 800177a:	2b08      	cmp	r3, #8
 800177c:	d07d      	beq.n	800187a <HAL_RCC_OscConfig+0x45a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d162      	bne.n	800184c <HAL_RCC_OscConfig+0x42c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001786:	4b5a      	ldr	r3, [pc, #360]	; (80018f0 <HAL_RCC_OscConfig+0x4d0>)
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178c:	f7ff f842 	bl	8000814 <HAL_GetTick>
 8001790:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001794:	f7ff f83e 	bl	8000814 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b64      	cmp	r3, #100	; 0x64
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e099      	b.n	80018da <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a6:	4b51      	ldr	r3, [pc, #324]	; (80018ec <HAL_RCC_OscConfig+0x4cc>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f0      	bne.n	8001794 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                              | \
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69da      	ldr	r2, [r3, #28]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80017c4:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c6:	6939      	ldr	r1, [r7, #16]
 80017c8:	fa91 f1a1 	rbit	r1, r1
 80017cc:	60f9      	str	r1, [r7, #12]
  return result;
 80017ce:	68f9      	ldr	r1, [r7, #12]
 80017d0:	fab1 f181 	clz	r1, r1
 80017d4:	b2c9      	uxtb	r1, r1
 80017d6:	408b      	lsls	r3, r1
 80017d8:	431a      	orrs	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017de:	085b      	lsrs	r3, r3, #1
 80017e0:	3b01      	subs	r3, #1
 80017e2:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80017e6:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e8:	69b9      	ldr	r1, [r7, #24]
 80017ea:	fa91 f1a1 	rbit	r1, r1
 80017ee:	6179      	str	r1, [r7, #20]
  return result;
 80017f0:	6979      	ldr	r1, [r7, #20]
 80017f2:	fab1 f181 	clz	r1, r1
 80017f6:	b2c9      	uxtb	r1, r1
 80017f8:	408b      	lsls	r3, r1
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001800:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8001804:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001806:	6a39      	ldr	r1, [r7, #32]
 8001808:	fa91 f1a1 	rbit	r1, r1
 800180c:	61f9      	str	r1, [r7, #28]
  return result;
 800180e:	69f9      	ldr	r1, [r7, #28]
 8001810:	fab1 f181 	clz	r1, r1
 8001814:	b2c9      	uxtb	r1, r1
 8001816:	408b      	lsls	r3, r1
 8001818:	4934      	ldr	r1, [pc, #208]	; (80018ec <HAL_RCC_OscConfig+0x4cc>)
 800181a:	4313      	orrs	r3, r2
 800181c:	604b      	str	r3, [r1, #4]
                                RCC_OscInitStruct->PLL.PLLM                                                    | \
                                (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))                | \
                                (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800181e:	4b34      	ldr	r3, [pc, #208]	; (80018f0 <HAL_RCC_OscConfig+0x4d0>)
 8001820:	2201      	movs	r2, #1
 8001822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001824:	f7fe fff6 	bl	8000814 <HAL_GetTick>
 8001828:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x41e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800182c:	f7fe fff2 	bl	8000814 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b64      	cmp	r3, #100	; 0x64
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x41e>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e04d      	b.n	80018da <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800183e:	4b2b      	ldr	r3, [pc, #172]	; (80018ec <HAL_RCC_OscConfig+0x4cc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d0f0      	beq.n	800182c <HAL_RCC_OscConfig+0x40c>
 800184a:	e045      	b.n	80018d8 <HAL_RCC_OscConfig+0x4b8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184c:	4b28      	ldr	r3, [pc, #160]	; (80018f0 <HAL_RCC_OscConfig+0x4d0>)
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001852:	f7fe ffdf 	bl	8000814 <HAL_GetTick>
 8001856:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x44c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800185a:	f7fe ffdb 	bl	8000814 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b64      	cmp	r3, #100	; 0x64
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x44c>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e036      	b.n	80018da <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800186c:	4b1f      	ldr	r3, [pc, #124]	; (80018ec <HAL_RCC_OscConfig+0x4cc>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1f0      	bne.n	800185a <HAL_RCC_OscConfig+0x43a>
 8001878:	e02e      	b.n	80018d8 <HAL_RCC_OscConfig+0x4b8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d101      	bne.n	8001886 <HAL_RCC_OscConfig+0x466>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e029      	b.n	80018da <HAL_RCC_OscConfig+0x4ba>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8001886:	4b19      	ldr	r3, [pc, #100]	; (80018ec <HAL_RCC_OscConfig+0x4cc>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	637b      	str	r3, [r7, #52]	; 0x34
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800188c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800188e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	429a      	cmp	r2, r3
 8001898:	d11c      	bne.n	80018d4 <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800189a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800189c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d115      	bne.n	80018d4 <HAL_RCC_OscConfig+0x4b4>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80018a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018aa:	099b      	lsrs	r3, r3, #6
 80018ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d10d      	bne.n	80018d4 <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d106      	bne.n	80018d4 <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80018c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e000      	b.n	80018da <HAL_RCC_OscConfig+0x4ba>
        }
      }
    }
  }
  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3740      	adds	r7, #64	; 0x40
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40007000 	.word	0x40007000
 80018e8:	40023870 	.word	0x40023870
 80018ec:	40023800 	.word	0x40023800
 80018f0:	42470060 	.word	0x42470060

080018f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e0d2      	b.n	8001aae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001908:	4b6b      	ldr	r3, [pc, #428]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 030f 	and.w	r3, r3, #15
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d90c      	bls.n	8001930 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001916:	4b68      	ldr	r3, [pc, #416]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800191e:	4b66      	ldr	r3, [pc, #408]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d001      	beq.n	8001930 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e0be      	b.n	8001aae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d020      	beq.n	800197e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	d005      	beq.n	8001954 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001948:	4b5c      	ldr	r3, [pc, #368]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	4a5b      	ldr	r2, [pc, #364]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 800194e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001952:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8001960:	4b56      	ldr	r3, [pc, #344]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	4a55      	ldr	r2, [pc, #340]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 8001966:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800196a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800196c:	4b53      	ldr	r3, [pc, #332]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	4950      	ldr	r1, [pc, #320]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 800197a:	4313      	orrs	r3, r2
 800197c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d040      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d107      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001992:	4b4a      	ldr	r3, [pc, #296]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d115      	bne.n	80019ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e085      	b.n	8001aae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d107      	bne.n	80019ba <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019aa:	4b44      	ldr	r3, [pc, #272]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d109      	bne.n	80019ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e079      	b.n	8001aae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ba:	4b40      	ldr	r3, [pc, #256]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e071      	b.n	8001aae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ca:	4b3c      	ldr	r3, [pc, #240]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f023 0203 	bic.w	r2, r3, #3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	4939      	ldr	r1, [pc, #228]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019dc:	f7fe ff1a 	bl	8000814 <HAL_GetTick>
 80019e0:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e2:	e00a      	b.n	80019fa <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e4:	f7fe ff16 	bl	8000814 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e059      	b.n	8001aae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fa:	4b30      	ldr	r3, [pc, #192]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 020c 	and.w	r2, r3, #12
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d1eb      	bne.n	80019e4 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a0c:	4b2a      	ldr	r3, [pc, #168]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 030f 	and.w	r3, r3, #15
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d20c      	bcs.n	8001a34 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1a:	4b27      	ldr	r3, [pc, #156]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a22:	4b25      	ldr	r3, [pc, #148]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d001      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e03c      	b.n	8001aae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d008      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a40:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	491b      	ldr	r1, [pc, #108]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0308 	and.w	r3, r3, #8
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d009      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a5e:	4b17      	ldr	r3, [pc, #92]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	4913      	ldr	r1, [pc, #76]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001a72:	f000 f82b 	bl	8001acc <HAL_RCC_GetSysClockFreq>
 8001a76:	4601      	mov	r1, r0
 8001a78:	4b10      	ldr	r3, [pc, #64]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a80:	22f0      	movs	r2, #240	; 0xf0
 8001a82:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	fa92 f2a2 	rbit	r2, r2
 8001a8a:	60fa      	str	r2, [r7, #12]
  return result;
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	fab2 f282 	clz	r2, r2
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	40d3      	lsrs	r3, r2
 8001a96:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <HAL_RCC_ClockConfig+0x1cc>)
 8001a98:	5cd3      	ldrb	r3, [r2, r3]
 8001a9a:	fa21 f303 	lsr.w	r3, r1, r3
 8001a9e:	4a09      	ldr	r2, [pc, #36]	; (8001ac4 <HAL_RCC_ClockConfig+0x1d0>)
 8001aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <HAL_RCC_ClockConfig+0x1d4>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fe72 	bl	8000790 <HAL_InitTick>

  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40023c00 	.word	0x40023c00
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	08003d60 	.word	0x08003d60
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	20000004 	.word	0x20000004

08001acc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	607b      	str	r3, [r7, #4]
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	2300      	movs	r3, #0
 8001adc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ae2:	4b50      	ldr	r3, [pc, #320]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x158>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	d007      	beq.n	8001afe <HAL_RCC_GetSysClockFreq+0x32>
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	d008      	beq.n	8001b04 <HAL_RCC_GetSysClockFreq+0x38>
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f040 808d 	bne.w	8001c12 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001af8:	4b4b      	ldr	r3, [pc, #300]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001afa:	60bb      	str	r3, [r7, #8]
       break;
 8001afc:	e08c      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001afe:	4b4b      	ldr	r3, [pc, #300]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x160>)
 8001b00:	60bb      	str	r3, [r7, #8]
      break;
 8001b02:	e089      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b04:	4b47      	ldr	r3, [pc, #284]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x158>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b0c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b0e:	4b45      	ldr	r3, [pc, #276]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x158>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d023      	beq.n	8001b62 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b1a:	4b42      	ldr	r3, [pc, #264]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x158>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	099b      	lsrs	r3, r3, #6
 8001b20:	f04f 0400 	mov.w	r4, #0
 8001b24:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	ea03 0501 	and.w	r5, r3, r1
 8001b30:	ea04 0602 	and.w	r6, r4, r2
 8001b34:	4a3d      	ldr	r2, [pc, #244]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x160>)
 8001b36:	fb02 f106 	mul.w	r1, r2, r6
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	fb02 f205 	mul.w	r2, r2, r5
 8001b40:	440a      	add	r2, r1
 8001b42:	493a      	ldr	r1, [pc, #232]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x160>)
 8001b44:	fba5 0101 	umull	r0, r1, r5, r1
 8001b48:	1853      	adds	r3, r2, r1
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f04f 0400 	mov.w	r4, #0
 8001b52:	461a      	mov	r2, r3
 8001b54:	4623      	mov	r3, r4
 8001b56:	f7fe fb35 	bl	80001c4 <__aeabi_uldivmod>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	460c      	mov	r4, r1
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	e049      	b.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b62:	4b30      	ldr	r3, [pc, #192]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x158>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	099b      	lsrs	r3, r3, #6
 8001b68:	f04f 0400 	mov.w	r4, #0
 8001b6c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	ea03 0501 	and.w	r5, r3, r1
 8001b78:	ea04 0602 	and.w	r6, r4, r2
 8001b7c:	4629      	mov	r1, r5
 8001b7e:	4632      	mov	r2, r6
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	f04f 0400 	mov.w	r4, #0
 8001b88:	0154      	lsls	r4, r2, #5
 8001b8a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b8e:	014b      	lsls	r3, r1, #5
 8001b90:	4619      	mov	r1, r3
 8001b92:	4622      	mov	r2, r4
 8001b94:	1b49      	subs	r1, r1, r5
 8001b96:	eb62 0206 	sbc.w	r2, r2, r6
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	f04f 0400 	mov.w	r4, #0
 8001ba2:	0194      	lsls	r4, r2, #6
 8001ba4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ba8:	018b      	lsls	r3, r1, #6
 8001baa:	1a5b      	subs	r3, r3, r1
 8001bac:	eb64 0402 	sbc.w	r4, r4, r2
 8001bb0:	f04f 0100 	mov.w	r1, #0
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	00e2      	lsls	r2, r4, #3
 8001bba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001bbe:	00d9      	lsls	r1, r3, #3
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4614      	mov	r4, r2
 8001bc4:	195b      	adds	r3, r3, r5
 8001bc6:	eb44 0406 	adc.w	r4, r4, r6
 8001bca:	f04f 0100 	mov.w	r1, #0
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	02a2      	lsls	r2, r4, #10
 8001bd4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001bd8:	0299      	lsls	r1, r3, #10
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4614      	mov	r4, r2
 8001bde:	4618      	mov	r0, r3
 8001be0:	4621      	mov	r1, r4
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f04f 0400 	mov.w	r4, #0
 8001be8:	461a      	mov	r2, r3
 8001bea:	4623      	mov	r3, r4
 8001bec:	f7fe faea 	bl	80001c4 <__aeabi_uldivmod>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	460c      	mov	r4, r1
 8001bf4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x158>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	0c1b      	lsrs	r3, r3, #16
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	3301      	adds	r3, #1
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0e:	60bb      	str	r3, [r7, #8]
      break;
 8001c10:	e002      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c12:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001c14:	60bb      	str	r3, [r7, #8]
      break;
 8001c16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c18:	68bb      	ldr	r3, [r7, #8]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40023800 	.word	0x40023800
 8001c28:	00f42400 	.word	0x00f42400
 8001c2c:	017d7840 	.word	0x017d7840

08001c30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001c30:	b084      	sub	sp, #16
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b084      	sub	sp, #16
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	f107 001c 	add.w	r0, r7, #28
 8001c3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d122      	bne.n	8001c8e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8001c5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8001c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d105      	bne.n	8001c82 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f001 f812 	bl	8002cac <USB_CoreReset>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	73fb      	strb	r3, [r7, #15]
 8001c8c:	e010      	b.n	8001cb0 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f001 f806 	bl	8002cac <USB_CoreReset>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8001cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d10b      	bne.n	8001cce <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f043 0206 	orr.w	r2, r3, #6
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f043 0220 	orr.w	r2, r3, #32
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cda:	b004      	add	sp, #16
 8001cdc:	4770      	bx	lr

08001cde <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f043 0201 	orr.w	r2, r3, #1
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr

08001cfe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f023 0201 	bic.w	r2, r3, #1
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr

08001d1e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	460b      	mov	r3, r1
 8001d28:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8001d36:	78fb      	ldrb	r3, [r7, #3]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d106      	bne.n	8001d4a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	60da      	str	r2, [r3, #12]
 8001d48:	e00b      	b.n	8001d62 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d106      	bne.n	8001d5e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	60da      	str	r2, [r3, #12]
 8001d5c:	e001      	b.n	8001d62 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e003      	b.n	8001d6a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8001d62:	2032      	movs	r0, #50	; 0x32
 8001d64:	f7fe fd60 	bl	8000828 <HAL_Delay>

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001d74:	b084      	sub	sp, #16
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b086      	sub	sp, #24
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
 8001d7e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001d82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8001d86:	2300      	movs	r3, #0
 8001d88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	e009      	b.n	8001da8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	3340      	adds	r3, #64	; 0x40
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	2200      	movs	r2, #0
 8001da0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	3301      	adds	r3, #1
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	2b0e      	cmp	r3, #14
 8001dac:	d9f2      	bls.n	8001d94 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8001dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d112      	bne.n	8001dda <USB_DevInit+0x66>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	639a      	str	r2, [r3, #56]	; 0x38
 8001dd8:	e00b      	b.n	8001df2 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dde:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8001df8:	461a      	mov	r2, r3
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e04:	4619      	mov	r1, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	680b      	ldr	r3, [r1, #0]
 8001e10:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d10c      	bne.n	8001e32 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8001e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d104      	bne.n	8001e28 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8001e1e:	2100      	movs	r1, #0
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f95d 	bl	80020e0 <USB_SetDevSpeed>
 8001e26:	e008      	b.n	8001e3a <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8001e28:	2101      	movs	r1, #1
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f958 	bl	80020e0 <USB_SetDevSpeed>
 8001e30:	e003      	b.n	8001e3a <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8001e32:	2103      	movs	r1, #3
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f953 	bl	80020e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8001e3a:	2110      	movs	r1, #16
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f90b 	bl	8002058 <USB_FlushTxFifo>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f927 	bl	80020a0 <USB_FlushRxFifo>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e62:	461a      	mov	r2, r3
 8001e64:	2300      	movs	r3, #0
 8001e66:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e6e:	461a      	mov	r2, r3
 8001e70:	2300      	movs	r3, #0
 8001e72:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001e80:	2300      	movs	r3, #0
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	e043      	b.n	8001f0e <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	015a      	lsls	r2, r3, #5
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e9c:	d118      	bne.n	8001ed0 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10a      	bne.n	8001eba <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	015a      	lsls	r2, r3, #5
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4413      	add	r3, r2
 8001eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	e013      	b.n	8001ee2 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	015a      	lsls	r2, r3, #5
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	e008      	b.n	8001ee2 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	015a      	lsls	r2, r3, #5
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001edc:	461a      	mov	r2, r3
 8001ede:	2300      	movs	r3, #0
 8001ee0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	015a      	lsls	r2, r3, #5
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4413      	add	r3, r2
 8001eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001eee:	461a      	mov	r2, r3
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	015a      	lsls	r2, r3, #5
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4413      	add	r3, r2
 8001efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f00:	461a      	mov	r2, r3
 8001f02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d3b7      	bcc.n	8001e86 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	e043      	b.n	8001fa4 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	015a      	lsls	r2, r3, #5
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4413      	add	r3, r2
 8001f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f32:	d118      	bne.n	8001f66 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10a      	bne.n	8001f50 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	015a      	lsls	r2, r3, #5
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4413      	add	r3, r2
 8001f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f46:	461a      	mov	r2, r3
 8001f48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	e013      	b.n	8001f78 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	015a      	lsls	r2, r3, #5
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4413      	add	r3, r2
 8001f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	e008      	b.n	8001f78 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	015a      	lsls	r2, r3, #5
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f72:	461a      	mov	r2, r3
 8001f74:	2300      	movs	r3, #0
 8001f76:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	015a      	lsls	r2, r3, #5
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4413      	add	r3, r2
 8001f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f84:	461a      	mov	r2, r3
 8001f86:	2300      	movs	r3, #0
 8001f88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	015a      	lsls	r2, r3, #5
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	4413      	add	r3, r2
 8001f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f96:	461a      	mov	r2, r3
 8001f98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d3b7      	bcc.n	8001f1c <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fbe:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8001fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d111      	bne.n	8001fea <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b20      	ldr	r3, [pc, #128]	; (8002050 <USB_DevInit+0x2dc>)
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe4:	f043 0303 	orr.w	r3, r3, #3
 8001fe8:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8001ff6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8001ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d105      	bne.n	800200a <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	f043 0210 	orr.w	r2, r3, #16
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699a      	ldr	r2, [r3, #24]
 800200e:	4b11      	ldr	r3, [pc, #68]	; (8002054 <USB_DevInit+0x2e0>)
 8002010:	4313      	orrs	r3, r2
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	f043 0208 	orr.w	r2, r3, #8
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800202a:	2b01      	cmp	r3, #1
 800202c:	d107      	bne.n	800203e <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002036:	f043 0304 	orr.w	r3, r3, #4
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800203e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800204a:	b004      	add	sp, #16
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	00800100 	.word	0x00800100
 8002054:	803c3800 	.word	0x803c3800

08002058 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	019b      	lsls	r3, r3, #6
 800206a:	f043 0220 	orr.w	r2, r3, #32
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	3301      	adds	r3, #1
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4a08      	ldr	r2, [pc, #32]	; (800209c <USB_FlushTxFifo+0x44>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d901      	bls.n	8002084 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e006      	b.n	8002092 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	f003 0320 	and.w	r3, r3, #32
 800208c:	2b20      	cmp	r3, #32
 800208e:	d0f0      	beq.n	8002072 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr
 800209c:	00030d40 	.word	0x00030d40

080020a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2210      	movs	r2, #16
 80020b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	3301      	adds	r3, #1
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4a08      	ldr	r2, [pc, #32]	; (80020dc <USB_FlushRxFifo+0x3c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d901      	bls.n	80020c4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e006      	b.n	80020d2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	f003 0310 	and.w	r3, r3, #16
 80020cc:	2b10      	cmp	r3, #16
 80020ce:	d0f0      	beq.n	80020b2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr
 80020dc:	00030d40 	.word	0x00030d40

080020e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	68f9      	ldr	r1, [r7, #12]
 80020fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002100:	4313      	orrs	r3, r2
 8002102:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr

08002110 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	785b      	ldrb	r3, [r3, #1]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d13a      	bne.n	80021a2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002132:	69da      	ldr	r2, [r3, #28]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	f003 030f 	and.w	r3, r3, #15
 800213c:	2101      	movs	r1, #1
 800213e:	fa01 f303 	lsl.w	r3, r1, r3
 8002142:	b29b      	uxth	r3, r3
 8002144:	68f9      	ldr	r1, [r7, #12]
 8002146:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800214a:	4313      	orrs	r3, r2
 800214c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	015a      	lsls	r2, r3, #5
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	4413      	add	r3, r2
 8002156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d155      	bne.n	8002210 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	015a      	lsls	r2, r3, #5
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4413      	add	r3, r2
 800216c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	78db      	ldrb	r3, [r3, #3]
 800217e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002180:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	059b      	lsls	r3, r3, #22
 8002186:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002188:	4313      	orrs	r3, r2
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	0151      	lsls	r1, r2, #5
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	440a      	add	r2, r1
 8002192:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800219a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	e036      	b.n	8002210 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021a8:	69da      	ldr	r2, [r3, #28]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	2101      	movs	r1, #1
 80021b4:	fa01 f303 	lsl.w	r3, r1, r3
 80021b8:	041b      	lsls	r3, r3, #16
 80021ba:	68f9      	ldr	r1, [r7, #12]
 80021bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	015a      	lsls	r2, r3, #5
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4413      	add	r3, r2
 80021cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d11a      	bne.n	8002210 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	78db      	ldrb	r3, [r3, #3]
 80021f4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80021f6:	430b      	orrs	r3, r1
 80021f8:	4313      	orrs	r3, r2
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	0151      	lsls	r1, r2, #5
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	440a      	add	r2, r1
 8002202:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800220e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr

0800221c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	785b      	ldrb	r3, [r3, #1]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d135      	bne.n	80022a4 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800223e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	f003 030f 	and.w	r3, r3, #15
 8002248:	2101      	movs	r1, #1
 800224a:	fa01 f303 	lsl.w	r3, r1, r3
 800224e:	b29b      	uxth	r3, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	68f9      	ldr	r1, [r7, #12]
 8002254:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002258:	4013      	ands	r3, r2
 800225a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002262:	69da      	ldr	r2, [r3, #28]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	f003 030f 	and.w	r3, r3, #15
 800226c:	2101      	movs	r1, #1
 800226e:	fa01 f303 	lsl.w	r3, r1, r3
 8002272:	b29b      	uxth	r3, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	68f9      	ldr	r1, [r7, #12]
 8002278:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800227c:	4013      	ands	r3, r2
 800227e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	015a      	lsls	r2, r3, #5
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4413      	add	r3, r2
 8002288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	0159      	lsls	r1, r3, #5
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	440b      	add	r3, r1
 8002296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800229a:	4619      	mov	r1, r3
 800229c:	4b1f      	ldr	r3, [pc, #124]	; (800231c <USB_DeactivateEndpoint+0x100>)
 800229e:	4013      	ands	r3, r2
 80022a0:	600b      	str	r3, [r1, #0]
 80022a2:	e034      	b.n	800230e <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	f003 030f 	and.w	r3, r3, #15
 80022b4:	2101      	movs	r1, #1
 80022b6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ba:	041b      	lsls	r3, r3, #16
 80022bc:	43db      	mvns	r3, r3
 80022be:	68f9      	ldr	r1, [r7, #12]
 80022c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022c4:	4013      	ands	r3, r2
 80022c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022ce:	69da      	ldr	r2, [r3, #28]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	f003 030f 	and.w	r3, r3, #15
 80022d8:	2101      	movs	r1, #1
 80022da:	fa01 f303 	lsl.w	r3, r1, r3
 80022de:	041b      	lsls	r3, r3, #16
 80022e0:	43db      	mvns	r3, r3
 80022e2:	68f9      	ldr	r1, [r7, #12]
 80022e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022e8:	4013      	ands	r3, r2
 80022ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	015a      	lsls	r2, r3, #5
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4413      	add	r3, r2
 80022f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	0159      	lsls	r1, r3, #5
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	440b      	add	r3, r1
 8002302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002306:	4619      	mov	r1, r3
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <USB_DeactivateEndpoint+0x104>)
 800230a:	4013      	ands	r3, r2
 800230c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	ec337800 	.word	0xec337800
 8002320:	eff37800 	.word	0xeff37800

08002324 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08a      	sub	sp, #40	; 0x28
 8002328:	af02      	add	r7, sp, #8
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	4613      	mov	r3, r2
 8002330:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	785b      	ldrb	r3, [r3, #1]
 8002340:	2b01      	cmp	r3, #1
 8002342:	f040 815c 	bne.w	80025fe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d132      	bne.n	80023b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	015a      	lsls	r2, r3, #5
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	4413      	add	r3, r2
 8002356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	0151      	lsls	r1, r2, #5
 8002360:	69fa      	ldr	r2, [r7, #28]
 8002362:	440a      	add	r2, r1
 8002364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002368:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800236c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8002370:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	015a      	lsls	r2, r3, #5
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	4413      	add	r3, r2
 800237a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	0151      	lsls	r1, r2, #5
 8002384:	69fa      	ldr	r2, [r7, #28]
 8002386:	440a      	add	r2, r1
 8002388:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800238c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002390:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	015a      	lsls	r2, r3, #5
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	4413      	add	r3, r2
 800239a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	0151      	lsls	r1, r2, #5
 80023a4:	69fa      	ldr	r2, [r7, #28]
 80023a6:	440a      	add	r2, r1
 80023a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80023ac:	0cdb      	lsrs	r3, r3, #19
 80023ae:	04db      	lsls	r3, r3, #19
 80023b0:	6113      	str	r3, [r2, #16]
 80023b2:	e074      	b.n	800249e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	0151      	lsls	r1, r2, #5
 80023c6:	69fa      	ldr	r2, [r7, #28]
 80023c8:	440a      	add	r2, r1
 80023ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80023ce:	0cdb      	lsrs	r3, r3, #19
 80023d0:	04db      	lsls	r3, r3, #19
 80023d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	015a      	lsls	r2, r3, #5
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	4413      	add	r3, r2
 80023dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	0151      	lsls	r1, r2, #5
 80023e6:	69fa      	ldr	r2, [r7, #28]
 80023e8:	440a      	add	r2, r1
 80023ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80023ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80023f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80023f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	015a      	lsls	r2, r3, #5
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	4413      	add	r3, r2
 8002400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002404:	691a      	ldr	r2, [r3, #16]
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	6959      	ldr	r1, [r3, #20]
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	440b      	add	r3, r1
 8002410:	1e59      	subs	r1, r3, #1
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	fbb1 f3f3 	udiv	r3, r1, r3
 800241a:	04d9      	lsls	r1, r3, #19
 800241c:	4b9d      	ldr	r3, [pc, #628]	; (8002694 <USB_EPStartXfer+0x370>)
 800241e:	400b      	ands	r3, r1
 8002420:	69b9      	ldr	r1, [r7, #24]
 8002422:	0148      	lsls	r0, r1, #5
 8002424:	69f9      	ldr	r1, [r7, #28]
 8002426:	4401      	add	r1, r0
 8002428:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800242c:	4313      	orrs	r3, r2
 800242e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	015a      	lsls	r2, r3, #5
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	4413      	add	r3, r2
 8002438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800243c:	691a      	ldr	r2, [r3, #16]
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002446:	69b9      	ldr	r1, [r7, #24]
 8002448:	0148      	lsls	r0, r1, #5
 800244a:	69f9      	ldr	r1, [r7, #28]
 800244c:	4401      	add	r1, r0
 800244e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8002452:	4313      	orrs	r3, r2
 8002454:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	78db      	ldrb	r3, [r3, #3]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d11f      	bne.n	800249e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	015a      	lsls	r2, r3, #5
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	4413      	add	r3, r2
 8002466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	0151      	lsls	r1, r2, #5
 8002470:	69fa      	ldr	r2, [r7, #28]
 8002472:	440a      	add	r2, r1
 8002474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002478:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800247c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	015a      	lsls	r2, r3, #5
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	4413      	add	r3, r2
 8002486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	0151      	lsls	r1, r2, #5
 8002490:	69fa      	ldr	r2, [r7, #28]
 8002492:	440a      	add	r2, r1
 8002494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002498:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800249c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d14b      	bne.n	800253c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d009      	beq.n	80024c0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024b8:	461a      	mov	r2, r3
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	78db      	ldrb	r3, [r3, #3]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d128      	bne.n	800251a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d110      	bne.n	80024fa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	0151      	lsls	r1, r2, #5
 80024ea:	69fa      	ldr	r2, [r7, #28]
 80024ec:	440a      	add	r2, r1
 80024ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80024f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	e00f      	b.n	800251a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	015a      	lsls	r2, r3, #5
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	4413      	add	r3, r2
 8002502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	0151      	lsls	r1, r2, #5
 800250c:	69fa      	ldr	r2, [r7, #28]
 800250e:	440a      	add	r2, r1
 8002510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002518:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	015a      	lsls	r2, r3, #5
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	4413      	add	r3, r2
 8002522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	0151      	lsls	r1, r2, #5
 800252c:	69fa      	ldr	r2, [r7, #28]
 800252e:	440a      	add	r2, r1
 8002530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002534:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e12f      	b.n	800279c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	4413      	add	r3, r2
 8002544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	0151      	lsls	r1, r2, #5
 800254e:	69fa      	ldr	r2, [r7, #28]
 8002550:	440a      	add	r2, r1
 8002552:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002556:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800255a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	78db      	ldrb	r3, [r3, #3]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d015      	beq.n	8002590 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 8117 	beq.w	800279c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	2101      	movs	r1, #1
 8002580:	fa01 f303 	lsl.w	r3, r1, r3
 8002584:	69f9      	ldr	r1, [r7, #28]
 8002586:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800258a:	4313      	orrs	r3, r2
 800258c:	634b      	str	r3, [r1, #52]	; 0x34
 800258e:	e105      	b.n	800279c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259c:	2b00      	cmp	r3, #0
 800259e:	d110      	bne.n	80025c2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	015a      	lsls	r2, r3, #5
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	0151      	lsls	r1, r2, #5
 80025b2:	69fa      	ldr	r2, [r7, #28]
 80025b4:	440a      	add	r2, r1
 80025b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80025ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80025be:	6013      	str	r3, [r2, #0]
 80025c0:	e00f      	b.n	80025e2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	015a      	lsls	r2, r3, #5
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	4413      	add	r3, r2
 80025ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	0151      	lsls	r1, r2, #5
 80025d4:	69fa      	ldr	r2, [r7, #28]
 80025d6:	440a      	add	r2, r1
 80025d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80025dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	68d9      	ldr	r1, [r3, #12]
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	781a      	ldrb	r2, [r3, #0]
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	b298      	uxth	r0, r3
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	4603      	mov	r3, r0
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 fa2a 	bl	8002a50 <USB_WritePacket>
 80025fc:	e0ce      	b.n	800279c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	015a      	lsls	r2, r3, #5
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	4413      	add	r3, r2
 8002606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	0151      	lsls	r1, r2, #5
 8002610:	69fa      	ldr	r2, [r7, #28]
 8002612:	440a      	add	r2, r1
 8002614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002618:	0cdb      	lsrs	r3, r3, #19
 800261a:	04db      	lsls	r3, r3, #19
 800261c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	015a      	lsls	r2, r3, #5
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	4413      	add	r3, r2
 8002626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	0151      	lsls	r1, r2, #5
 8002630:	69fa      	ldr	r2, [r7, #28]
 8002632:	440a      	add	r2, r1
 8002634:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002638:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800263c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8002640:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d126      	bne.n	8002698 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	015a      	lsls	r2, r3, #5
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	4413      	add	r3, r2
 8002652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002660:	69b9      	ldr	r1, [r7, #24]
 8002662:	0148      	lsls	r0, r1, #5
 8002664:	69f9      	ldr	r1, [r7, #28]
 8002666:	4401      	add	r1, r0
 8002668:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800266c:	4313      	orrs	r3, r2
 800266e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	4413      	add	r3, r2
 8002678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	0151      	lsls	r1, r2, #5
 8002682:	69fa      	ldr	r2, [r7, #28]
 8002684:	440a      	add	r2, r1
 8002686:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800268a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800268e:	6113      	str	r3, [r2, #16]
 8002690:	e036      	b.n	8002700 <USB_EPStartXfer+0x3dc>
 8002692:	bf00      	nop
 8002694:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	695a      	ldr	r2, [r3, #20]
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	4413      	add	r3, r2
 80026a2:	1e5a      	subs	r2, r3, #1
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ac:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	015a      	lsls	r2, r3, #5
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ba:	691a      	ldr	r2, [r3, #16]
 80026bc:	8afb      	ldrh	r3, [r7, #22]
 80026be:	04d9      	lsls	r1, r3, #19
 80026c0:	4b39      	ldr	r3, [pc, #228]	; (80027a8 <USB_EPStartXfer+0x484>)
 80026c2:	400b      	ands	r3, r1
 80026c4:	69b9      	ldr	r1, [r7, #24]
 80026c6:	0148      	lsls	r0, r1, #5
 80026c8:	69f9      	ldr	r1, [r7, #28]
 80026ca:	4401      	add	r1, r0
 80026cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80026d0:	4313      	orrs	r3, r2
 80026d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026e0:	691a      	ldr	r2, [r3, #16]
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	8af9      	ldrh	r1, [r7, #22]
 80026e8:	fb01 f303 	mul.w	r3, r1, r3
 80026ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f0:	69b9      	ldr	r1, [r7, #24]
 80026f2:	0148      	lsls	r0, r1, #5
 80026f4:	69f9      	ldr	r1, [r7, #28]
 80026f6:	4401      	add	r1, r0
 80026f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80026fc:	4313      	orrs	r3, r2
 80026fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d10d      	bne.n	8002722 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d009      	beq.n	8002722 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	68d9      	ldr	r1, [r3, #12]
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	015a      	lsls	r2, r3, #5
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	4413      	add	r3, r2
 800271a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800271e:	460a      	mov	r2, r1
 8002720:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	78db      	ldrb	r3, [r3, #3]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d128      	bne.n	800277c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002736:	2b00      	cmp	r3, #0
 8002738:	d110      	bne.n	800275c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	015a      	lsls	r2, r3, #5
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	4413      	add	r3, r2
 8002742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	0151      	lsls	r1, r2, #5
 800274c:	69fa      	ldr	r2, [r7, #28]
 800274e:	440a      	add	r2, r1
 8002750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002754:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	e00f      	b.n	800277c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	015a      	lsls	r2, r3, #5
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	4413      	add	r3, r2
 8002764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	0151      	lsls	r1, r2, #5
 800276e:	69fa      	ldr	r2, [r7, #28]
 8002770:	440a      	add	r2, r1
 8002772:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800277a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	015a      	lsls	r2, r3, #5
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	4413      	add	r3, r2
 8002784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	0151      	lsls	r1, r2, #5
 800278e:	69fa      	ldr	r2, [r7, #28]
 8002790:	440a      	add	r2, r1
 8002792:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002796:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800279a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3720      	adds	r7, #32
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	1ff80000 	.word	0x1ff80000

080027ac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	4613      	mov	r3, r2
 80027b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	785b      	ldrb	r3, [r3, #1]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	f040 80cd 	bne.w	8002968 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d132      	bne.n	800283c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	015a      	lsls	r2, r3, #5
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	4413      	add	r3, r2
 80027de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	0151      	lsls	r1, r2, #5
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	440a      	add	r2, r1
 80027ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80027f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80027f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	015a      	lsls	r2, r3, #5
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	4413      	add	r3, r2
 8002802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	0151      	lsls	r1, r2, #5
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	440a      	add	r2, r1
 8002810:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002814:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002818:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	015a      	lsls	r2, r3, #5
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	4413      	add	r3, r2
 8002822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	0151      	lsls	r1, r2, #5
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	440a      	add	r2, r1
 8002830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002834:	0cdb      	lsrs	r3, r3, #19
 8002836:	04db      	lsls	r3, r3, #19
 8002838:	6113      	str	r3, [r2, #16]
 800283a:	e04e      	b.n	80028da <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	4413      	add	r3, r2
 8002844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	0151      	lsls	r1, r2, #5
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	440a      	add	r2, r1
 8002852:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002856:	0cdb      	lsrs	r3, r3, #19
 8002858:	04db      	lsls	r3, r3, #19
 800285a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	4413      	add	r3, r2
 8002864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	0151      	lsls	r1, r2, #5
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	440a      	add	r2, r1
 8002872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002876:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800287a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800287e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	695a      	ldr	r2, [r3, #20]
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	429a      	cmp	r2, r3
 800288a:	d903      	bls.n	8002894 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	015a      	lsls	r2, r3, #5
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	4413      	add	r3, r2
 800289c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	0151      	lsls	r1, r2, #5
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	440a      	add	r2, r1
 80028aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80028ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80028b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028c0:	691a      	ldr	r2, [r3, #16]
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ca:	6939      	ldr	r1, [r7, #16]
 80028cc:	0148      	lsls	r0, r1, #5
 80028ce:	6979      	ldr	r1, [r7, #20]
 80028d0:	4401      	add	r1, r0
 80028d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80028d6:	4313      	orrs	r3, r2
 80028d8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d11e      	bne.n	800291e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d009      	beq.n	80028fc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	015a      	lsls	r2, r3, #5
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028f4:	461a      	mov	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	4413      	add	r3, r2
 8002904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	0151      	lsls	r1, r2, #5
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	440a      	add	r2, r1
 8002912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002916:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	e092      	b.n	8002a44 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	015a      	lsls	r2, r3, #5
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	4413      	add	r3, r2
 8002926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	0151      	lsls	r1, r2, #5
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	440a      	add	r2, r1
 8002934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002938:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800293c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d07e      	beq.n	8002a44 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800294c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	2101      	movs	r1, #1
 8002958:	fa01 f303 	lsl.w	r3, r1, r3
 800295c:	6979      	ldr	r1, [r7, #20]
 800295e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002962:	4313      	orrs	r3, r2
 8002964:	634b      	str	r3, [r1, #52]	; 0x34
 8002966:	e06d      	b.n	8002a44 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	015a      	lsls	r2, r3, #5
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	4413      	add	r3, r2
 8002970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	0151      	lsls	r1, r2, #5
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	440a      	add	r2, r1
 800297e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002982:	0cdb      	lsrs	r3, r3, #19
 8002984:	04db      	lsls	r3, r3, #19
 8002986:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	4413      	add	r3, r2
 8002990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	0151      	lsls	r1, r2, #5
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	440a      	add	r2, r1
 800299e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80029a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80029aa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	015a      	lsls	r2, r3, #5
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	4413      	add	r3, r2
 80029c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	0151      	lsls	r1, r2, #5
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	440a      	add	r2, r1
 80029d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80029da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029e8:	691a      	ldr	r2, [r3, #16]
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f2:	6939      	ldr	r1, [r7, #16]
 80029f4:	0148      	lsls	r0, r1, #5
 80029f6:	6979      	ldr	r1, [r7, #20]
 80029f8:	4401      	add	r1, r0
 80029fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80029fe:	4313      	orrs	r3, r2
 8002a00:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d10d      	bne.n	8002a24 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d009      	beq.n	8002a24 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	68d9      	ldr	r1, [r3, #12]
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a20:	460a      	mov	r2, r1
 8002a22:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	015a      	lsls	r2, r3, #5
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	0151      	lsls	r1, r2, #5
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	440a      	add	r2, r1
 8002a3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002a42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	371c      	adds	r7, #28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr

08002a50 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b089      	sub	sp, #36	; 0x24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	460b      	mov	r3, r1
 8002a60:	71fb      	strb	r3, [r7, #7]
 8002a62:	4613      	mov	r3, r2
 8002a64:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8002a6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d11a      	bne.n	8002aac <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8002a76:	88bb      	ldrh	r3, [r7, #4]
 8002a78:	3303      	adds	r3, #3
 8002a7a:	089b      	lsrs	r3, r3, #2
 8002a7c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61bb      	str	r3, [r7, #24]
 8002a82:	e00f      	b.n	8002aa4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	031a      	lsls	r2, r3, #12
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a90:	461a      	mov	r2, r3
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6013      	str	r3, [r2, #0]
      pSrc++;
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	61bb      	str	r3, [r7, #24]
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d3eb      	bcc.n	8002a84 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3724      	adds	r7, #36	; 0x24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr

08002ab8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	785b      	ldrb	r3, [r3, #1]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d12c      	bne.n	8002b2e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	015a      	lsls	r2, r3, #5
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	4413      	add	r3, r2
 8002adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	db12      	blt.n	8002b0c <USB_EPSetStall+0x54>
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00f      	beq.n	8002b0c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	0151      	lsls	r1, r2, #5
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	440a      	add	r2, r1
 8002b02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b0a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	015a      	lsls	r2, r3, #5
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	0151      	lsls	r1, r2, #5
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	440a      	add	r2, r1
 8002b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	e02b      	b.n	8002b86 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	015a      	lsls	r2, r3, #5
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	db12      	blt.n	8002b66 <USB_EPSetStall+0xae>
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00f      	beq.n	8002b66 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	015a      	lsls	r2, r3, #5
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	0151      	lsls	r1, r2, #5
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	440a      	add	r2, r1
 8002b5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b64:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	015a      	lsls	r2, r3, #5
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	0151      	lsls	r1, r2, #5
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	440a      	add	r2, r1
 8002b7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b84:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr

08002b92 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b084      	sub	sp, #16
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bac:	f023 0302 	bic.w	r3, r3, #2
 8002bb0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8002bb2:	2003      	movs	r0, #3
 8002bb4:	f7fd fe38 	bl	8000828 <HAL_Delay>

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bdc:	f043 0302 	orr.w	r3, r3, #2
 8002be0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8002be2:	2003      	movs	r0, #3
 8002be4:	f7fd fe20 	bl	8000828 <HAL_Delay>

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	333c      	adds	r3, #60	; 0x3c
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	4a25      	ldr	r2, [pc, #148]	; (8002ca8 <USB_EP0_OutStart+0xb4>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d90a      	bls.n	8002c2e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c28:	d101      	bne.n	8002c2e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	e037      	b.n	8002c9e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c34:	461a      	mov	r2, r3
 8002c36:	2300      	movs	r3, #0
 8002c38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c5c:	f043 0318 	orr.w	r3, r3, #24
 8002c60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c70:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8002c74:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8002c76:	7afb      	ldrb	r3, [r7, #11]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d10f      	bne.n	8002c9c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c82:	461a      	mov	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c96:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8002c9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	371c      	adds	r7, #28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr
 8002ca8:	4f54300a 	.word	0x4f54300a

08002cac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4a12      	ldr	r2, [pc, #72]	; (8002d0c <USB_CoreReset+0x60>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d901      	bls.n	8002cca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e01b      	b.n	8002d02 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	daf2      	bge.n	8002cb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	f043 0201 	orr.w	r2, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4a08      	ldr	r2, [pc, #32]	; (8002d0c <USB_CoreReset+0x60>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d901      	bls.n	8002cf4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e006      	b.n	8002d02 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d0f0      	beq.n	8002ce2 <USB_CoreReset+0x36>

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr
 8002d0c:	00030d40 	.word	0x00030d40

08002d10 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	7c1b      	ldrb	r3, [r3, #16]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d115      	bne.n	8002d54 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002d28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	2181      	movs	r1, #129	; 0x81
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 fe02 	bl	800393a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002d3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d40:	2202      	movs	r2, #2
 8002d42:	2101      	movs	r1, #1
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 fdf8 	bl	800393a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8002d52:	e012      	b.n	8002d7a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002d54:	2340      	movs	r3, #64	; 0x40
 8002d56:	2202      	movs	r2, #2
 8002d58:	2181      	movs	r1, #129	; 0x81
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 fded 	bl	800393a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002d66:	2340      	movs	r3, #64	; 0x40
 8002d68:	2202      	movs	r2, #2
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 fde4 	bl	800393a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8002d7a:	2308      	movs	r3, #8
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	2182      	movs	r1, #130	; 0x82
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 fdda 	bl	800393a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8002d8c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8002d90:	f000 fee6 	bl	8003b60 <malloc>
 8002d94:	4603      	mov	r3, r0
 8002d96:	461a      	mov	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d102      	bne.n	8002dae <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8002da8:	2301      	movs	r3, #1
 8002daa:	73fb      	strb	r3, [r7, #15]
 8002dac:	e026      	b.n	8002dfc <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002db4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	7c1b      	ldrb	r3, [r3, #16]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d109      	bne.n	8002dec <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002dde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002de2:	2101      	movs	r1, #1
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 fe2f 	bl	8003a48 <USBD_LL_PrepareReceive>
 8002dea:	e007      	b.n	8002dfc <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002df2:	2340      	movs	r3, #64	; 0x40
 8002df4:	2101      	movs	r1, #1
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 fe26 	bl	8003a48 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	460b      	mov	r3, r1
 8002e10:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8002e16:	2181      	movs	r1, #129	; 0x81
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 fdb4 	bl	8003986 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8002e24:	2101      	movs	r1, #1
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 fdad 	bl	8003986 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8002e34:	2182      	movs	r1, #130	; 0x82
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 fda5 	bl	8003986 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00e      	beq.n	8002e6a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 fe87 	bl	8003b70 <free>
    pdev->pClassData = NULL;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002e84:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d039      	beq.n	8002f12 <USBD_CDC_Setup+0x9e>
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	d17c      	bne.n	8002f9c <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	88db      	ldrh	r3, [r3, #6]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d029      	beq.n	8002efe <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	b25b      	sxtb	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	da11      	bge.n	8002ed8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8002ec0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	88d2      	ldrh	r2, [r2, #6]
 8002ec6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8002ec8:	6939      	ldr	r1, [r7, #16]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	88db      	ldrh	r3, [r3, #6]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 fa7b 	bl	80033cc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8002ed6:	e068      	b.n	8002faa <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	785a      	ldrb	r2, [r3, #1]
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	88db      	ldrh	r3, [r3, #6]
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8002eee:	6939      	ldr	r1, [r7, #16]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	88db      	ldrh	r3, [r3, #6]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 fa84 	bl	8003404 <USBD_CtlPrepareRx>
      break;
 8002efc:	e055      	b.n	8002faa <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	7850      	ldrb	r0, [r2, #1]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	6839      	ldr	r1, [r7, #0]
 8002f0e:	4798      	blx	r3
      break;
 8002f10:	e04b      	b.n	8002faa <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	785b      	ldrb	r3, [r3, #1]
 8002f16:	2b0a      	cmp	r3, #10
 8002f18:	d017      	beq.n	8002f4a <USBD_CDC_Setup+0xd6>
 8002f1a:	2b0b      	cmp	r3, #11
 8002f1c:	d029      	beq.n	8002f72 <USBD_CDC_Setup+0xfe>
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d133      	bne.n	8002f8a <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	d107      	bne.n	8002f3c <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8002f2c:	f107 030c 	add.w	r3, r7, #12
 8002f30:	2202      	movs	r2, #2
 8002f32:	4619      	mov	r1, r3
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 fa49 	bl	80033cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8002f3a:	e02e      	b.n	8002f9a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8002f3c:	6839      	ldr	r1, [r7, #0]
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f9da 	bl	80032f8 <USBD_CtlError>
            ret = USBD_FAIL;
 8002f44:	2302      	movs	r3, #2
 8002f46:	75fb      	strb	r3, [r7, #23]
          break;
 8002f48:	e027      	b.n	8002f9a <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	d107      	bne.n	8002f64 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8002f54:	f107 030f 	add.w	r3, r7, #15
 8002f58:	2201      	movs	r2, #1
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 fa35 	bl	80033cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8002f62:	e01a      	b.n	8002f9a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8002f64:	6839      	ldr	r1, [r7, #0]
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f9c6 	bl	80032f8 <USBD_CtlError>
            ret = USBD_FAIL;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	75fb      	strb	r3, [r7, #23]
          break;
 8002f70:	e013      	b.n	8002f9a <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8002f78:	2b03      	cmp	r3, #3
 8002f7a:	d00d      	beq.n	8002f98 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8002f7c:	6839      	ldr	r1, [r7, #0]
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f9ba 	bl	80032f8 <USBD_CtlError>
            ret = USBD_FAIL;
 8002f84:	2302      	movs	r3, #2
 8002f86:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8002f88:	e006      	b.n	8002f98 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8002f8a:	6839      	ldr	r1, [r7, #0]
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f9b3 	bl	80032f8 <USBD_CtlError>
          ret = USBD_FAIL;
 8002f92:	2302      	movs	r3, #2
 8002f94:	75fb      	strb	r3, [r7, #23]
          break;
 8002f96:	e000      	b.n	8002f9a <USBD_CDC_Setup+0x126>
          break;
 8002f98:	bf00      	nop
      }
      break;
 8002f9a:	e006      	b.n	8002faa <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8002f9c:	6839      	ldr	r1, [r7, #0]
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f9aa 	bl	80032f8 <USBD_CtlError>
      ret = USBD_FAIL;
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8002fa8:	bf00      	nop
  }

  return ret;
 8002faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002fc6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002fce:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d03a      	beq.n	8003050 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8002fda:	78fa      	ldrb	r2, [r7, #3]
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	331c      	adds	r3, #28
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d029      	beq.n	8003044 <USBD_CDC_DataIn+0x90>
 8002ff0:	78fa      	ldrb	r2, [r7, #3]
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	331c      	adds	r3, #28
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	78f9      	ldrb	r1, [r7, #3]
 8003004:	68b8      	ldr	r0, [r7, #8]
 8003006:	460b      	mov	r3, r1
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	1a5b      	subs	r3, r3, r1
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4403      	add	r3, r0
 8003010:	3344      	adds	r3, #68	; 0x44
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	fbb2 f1f3 	udiv	r1, r2, r3
 8003018:	fb03 f301 	mul.w	r3, r3, r1
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d110      	bne.n	8003044 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8003022:	78fa      	ldrb	r2, [r7, #3]
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	440b      	add	r3, r1
 8003030:	331c      	adds	r3, #28
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003036:	78f9      	ldrb	r1, [r7, #3]
 8003038:	2300      	movs	r3, #0
 800303a:	2200      	movs	r2, #0
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 fce0 	bl	8003a02 <USBD_LL_Transmit>
 8003042:	e003      	b.n	800304c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800304c:	2300      	movs	r3, #0
 800304e:	e000      	b.n	8003052 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8003050:	2302      	movs	r3, #2
  }
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	460b      	mov	r3, r1
 8003064:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800306c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800306e:	78fb      	ldrb	r3, [r7, #3]
 8003070:	4619      	mov	r1, r3
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fd0b 	bl	8003a8e <USBD_LL_GetRxDataSize>
 8003078:	4602      	mov	r2, r0
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00d      	beq.n	80030a6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800309e:	4611      	mov	r1, r2
 80030a0:	4798      	blx	r3

    return USBD_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	e000      	b.n	80030a8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80030a6:	2302      	movs	r3, #2
  }
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80030be:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d015      	beq.n	80030f6 <USBD_CDC_EP0_RxReady+0x46>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80030d0:	2bff      	cmp	r3, #255	; 0xff
 80030d2:	d010      	beq.n	80030f6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80030e2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80030ea:	b292      	uxth	r2, r2
 80030ec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	22ff      	movs	r2, #255	; 0xff
 80030f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2243      	movs	r2, #67	; 0x43
 800310c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800310e:	4b03      	ldr	r3, [pc, #12]	; (800311c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8003110:	4618      	mov	r0, r3
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	20000094 	.word	0x20000094

08003120 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2243      	movs	r2, #67	; 0x43
 800312c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800312e:	4b03      	ldr	r3, [pc, #12]	; (800313c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8003130:	4618      	mov	r0, r3
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	20000050 	.word	0x20000050

08003140 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2243      	movs	r2, #67	; 0x43
 800314c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800314e:	4b03      	ldr	r3, [pc, #12]	; (800315c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8003150:	4618      	mov	r0, r3
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	200000d8 	.word	0x200000d8

08003160 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	220a      	movs	r2, #10
 800316c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800316e:	4b03      	ldr	r3, [pc, #12]	; (800317c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8003170:	4618      	mov	r0, r3
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	bc80      	pop	{r7}
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	2000000c 	.word	0x2000000c

08003180 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800318a:	2302      	movs	r3, #2
 800318c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800319c:	2300      	movs	r3, #0
 800319e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr

080031ac <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b087      	sub	sp, #28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	4613      	mov	r3, r2
 80031b8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80031c0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80031ca:	88fa      	ldrh	r2, [r7, #6]
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	371c      	adds	r7, #28
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr

080031de <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80031de:	b480      	push	{r7}
 80031e0:	b085      	sub	sp, #20
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
 80031e6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80031ee:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr

08003204 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003212:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800321a:	2b00      	cmp	r3, #0
 800321c:	d017      	beq.n	800324e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	7c1b      	ldrb	r3, [r3, #16]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d109      	bne.n	800323a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800322c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003230:	2101      	movs	r1, #1
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 fc08 	bl	8003a48 <USBD_LL_PrepareReceive>
 8003238:	e007      	b.n	800324a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003240:	2340      	movs	r3, #64	; 0x40
 8003242:	2101      	movs	r1, #1
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 fbff 	bl	8003a48 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	e000      	b.n	8003250 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800324e:	2302      	movs	r3, #2
  }
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	4613      	mov	r3, r2
 8003264:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800326c:	2302      	movs	r3, #2
 800326e:	e01a      	b.n	80032a6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	79fa      	ldrb	r2, [r7, #7]
 800329c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 fae6 	bl	8003870 <USBD_LL_Init>

  return USBD_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b085      	sub	sp, #20
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80032b8:	2300      	movs	r3, #0
 80032ba:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d006      	beq.n	80032d0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	73fb      	strb	r3, [r7, #15]
 80032ce:	e001      	b.n	80032d4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80032d0:	2302      	movs	r3, #2
 80032d2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr

080032e0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 fb0b 	bl	8003904 <USBD_LL_Start>

  return USBD_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8003302:	2180      	movs	r1, #128	; 0x80
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 fb5d 	bl	80039c4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800330a:	2100      	movs	r1, #0
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 fb59 	bl	80039c4 <USBD_LL_StallEP>
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b086      	sub	sp, #24
 800331e:	af00      	add	r7, sp, #0
 8003320:	60f8      	str	r0, [r7, #12]
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8003326:	2300      	movs	r3, #0
 8003328:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d032      	beq.n	8003396 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 f834 	bl	800339e <USBD_GetLen>
 8003336:	4603      	mov	r3, r0
 8003338:	3301      	adds	r3, #1
 800333a:	b29b      	uxth	r3, r3
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8003344:	7dfb      	ldrb	r3, [r7, #23]
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	75fa      	strb	r2, [r7, #23]
 800334a:	461a      	mov	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	4413      	add	r3, r2
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	7812      	ldrb	r2, [r2, #0]
 8003354:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8003356:	7dfb      	ldrb	r3, [r7, #23]
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	75fa      	strb	r2, [r7, #23]
 800335c:	461a      	mov	r2, r3
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	4413      	add	r3, r2
 8003362:	2203      	movs	r2, #3
 8003364:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8003366:	e012      	b.n	800338e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	60fa      	str	r2, [r7, #12]
 800336e:	7dfa      	ldrb	r2, [r7, #23]
 8003370:	1c51      	adds	r1, r2, #1
 8003372:	75f9      	strb	r1, [r7, #23]
 8003374:	4611      	mov	r1, r2
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	440a      	add	r2, r1
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800337e:	7dfb      	ldrb	r3, [r7, #23]
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	75fa      	strb	r2, [r7, #23]
 8003384:	461a      	mov	r2, r3
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	4413      	add	r3, r2
 800338a:	2200      	movs	r2, #0
 800338c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1e8      	bne.n	8003368 <USBD_GetString+0x4e>
    }
  }
}
 8003396:	bf00      	nop
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800339e:	b480      	push	{r7}
 80033a0:	b085      	sub	sp, #20
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80033aa:	e005      	b.n	80033b8 <USBD_GetLen+0x1a>
  {
    len++;
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
 80033ae:	3301      	adds	r3, #1
 80033b0:	73fb      	strb	r3, [r7, #15]
    buf++;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	3301      	adds	r3, #1
 80033b6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1f5      	bne.n	80033ac <USBD_GetLen+0xe>
  }

  return len;
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr

080033cc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	4613      	mov	r3, r2
 80033d8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2202      	movs	r2, #2
 80033de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80033e2:	88fa      	ldrh	r2, [r7, #6]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80033e8:	88fa      	ldrh	r2, [r7, #6]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	2100      	movs	r1, #0
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 fb04 	bl	8003a02 <USBD_LL_Transmit>

  return USBD_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	4613      	mov	r3, r2
 8003410:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2203      	movs	r2, #3
 8003416:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800341a:	88fa      	ldrh	r2, [r7, #6]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8003422:	88fa      	ldrh	r2, [r7, #6]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800342a:	88fb      	ldrh	r3, [r7, #6]
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	2100      	movs	r1, #0
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f000 fb09 	bl	8003a48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8003444:	2200      	movs	r2, #0
 8003446:	4912      	ldr	r1, [pc, #72]	; (8003490 <MX_USB_DEVICE_Init+0x50>)
 8003448:	4812      	ldr	r0, [pc, #72]	; (8003494 <MX_USB_DEVICE_Init+0x54>)
 800344a:	f7ff ff05 	bl	8003258 <USBD_Init>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8003454:	f7fd f8a0 	bl	8000598 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8003458:	490f      	ldr	r1, [pc, #60]	; (8003498 <MX_USB_DEVICE_Init+0x58>)
 800345a:	480e      	ldr	r0, [pc, #56]	; (8003494 <MX_USB_DEVICE_Init+0x54>)
 800345c:	f7ff ff27 	bl	80032ae <USBD_RegisterClass>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8003466:	f7fd f897 	bl	8000598 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800346a:	490c      	ldr	r1, [pc, #48]	; (800349c <MX_USB_DEVICE_Init+0x5c>)
 800346c:	4809      	ldr	r0, [pc, #36]	; (8003494 <MX_USB_DEVICE_Init+0x54>)
 800346e:	f7ff fe87 	bl	8003180 <USBD_CDC_RegisterInterface>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8003478:	f7fd f88e 	bl	8000598 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800347c:	4805      	ldr	r0, [pc, #20]	; (8003494 <MX_USB_DEVICE_Init+0x54>)
 800347e:	f7ff ff2f 	bl	80032e0 <USBD_Start>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8003488:	f7fd f886 	bl	8000598 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800348c:	bf00      	nop
 800348e:	bd80      	pop	{r7, pc}
 8003490:	2000012c 	.word	0x2000012c
 8003494:	2000020c 	.word	0x2000020c
 8003498:	20000018 	.word	0x20000018
 800349c:	2000011c 	.word	0x2000011c

080034a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80034a4:	2200      	movs	r2, #0
 80034a6:	4905      	ldr	r1, [pc, #20]	; (80034bc <CDC_Init_FS+0x1c>)
 80034a8:	4805      	ldr	r0, [pc, #20]	; (80034c0 <CDC_Init_FS+0x20>)
 80034aa:	f7ff fe7f 	bl	80031ac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80034ae:	4905      	ldr	r1, [pc, #20]	; (80034c4 <CDC_Init_FS+0x24>)
 80034b0:	4803      	ldr	r0, [pc, #12]	; (80034c0 <CDC_Init_FS+0x20>)
 80034b2:	f7ff fe94 	bl	80031de <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80034b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	200008b8 	.word	0x200008b8
 80034c0:	2000020c 	.word	0x2000020c
 80034c4:	200004d0 	.word	0x200004d0

080034c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80034cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bc80      	pop	{r7}
 80034d4:	4770      	bx	lr
	...

080034d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	6039      	str	r1, [r7, #0]
 80034e2:	71fb      	strb	r3, [r7, #7]
 80034e4:	4613      	mov	r3, r2
 80034e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80034e8:	79fb      	ldrb	r3, [r7, #7]
 80034ea:	2b23      	cmp	r3, #35	; 0x23
 80034ec:	d84a      	bhi.n	8003584 <CDC_Control_FS+0xac>
 80034ee:	a201      	add	r2, pc, #4	; (adr r2, 80034f4 <CDC_Control_FS+0x1c>)
 80034f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f4:	08003585 	.word	0x08003585
 80034f8:	08003585 	.word	0x08003585
 80034fc:	08003585 	.word	0x08003585
 8003500:	08003585 	.word	0x08003585
 8003504:	08003585 	.word	0x08003585
 8003508:	08003585 	.word	0x08003585
 800350c:	08003585 	.word	0x08003585
 8003510:	08003585 	.word	0x08003585
 8003514:	08003585 	.word	0x08003585
 8003518:	08003585 	.word	0x08003585
 800351c:	08003585 	.word	0x08003585
 8003520:	08003585 	.word	0x08003585
 8003524:	08003585 	.word	0x08003585
 8003528:	08003585 	.word	0x08003585
 800352c:	08003585 	.word	0x08003585
 8003530:	08003585 	.word	0x08003585
 8003534:	08003585 	.word	0x08003585
 8003538:	08003585 	.word	0x08003585
 800353c:	08003585 	.word	0x08003585
 8003540:	08003585 	.word	0x08003585
 8003544:	08003585 	.word	0x08003585
 8003548:	08003585 	.word	0x08003585
 800354c:	08003585 	.word	0x08003585
 8003550:	08003585 	.word	0x08003585
 8003554:	08003585 	.word	0x08003585
 8003558:	08003585 	.word	0x08003585
 800355c:	08003585 	.word	0x08003585
 8003560:	08003585 	.word	0x08003585
 8003564:	08003585 	.word	0x08003585
 8003568:	08003585 	.word	0x08003585
 800356c:	08003585 	.word	0x08003585
 8003570:	08003585 	.word	0x08003585
 8003574:	08003585 	.word	0x08003585
 8003578:	08003585 	.word	0x08003585
 800357c:	08003585 	.word	0x08003585
 8003580:	08003585 	.word	0x08003585
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8003584:	bf00      	nop
  }

  return (USBD_OK);
 8003586:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8003588:	4618      	mov	r0, r3
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	bc80      	pop	{r7}
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop

08003594 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	4805      	ldr	r0, [pc, #20]	; (80035b8 <CDC_Receive_FS+0x24>)
 80035a2:	f7ff fe1c 	bl	80031de <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80035a6:	4804      	ldr	r0, [pc, #16]	; (80035b8 <CDC_Receive_FS+0x24>)
 80035a8:	f7ff fe2c 	bl	8003204 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80035ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	2000020c 	.word	0x2000020c

080035bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	6039      	str	r1, [r7, #0]
 80035c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	2212      	movs	r2, #18
 80035cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80035ce:	4b03      	ldr	r3, [pc, #12]	; (80035dc <USBD_FS_DeviceDescriptor+0x20>)
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bc80      	pop	{r7}
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	20000148 	.word	0x20000148

080035e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	6039      	str	r1, [r7, #0]
 80035ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	2204      	movs	r2, #4
 80035f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80035f2:	4b03      	ldr	r3, [pc, #12]	; (8003600 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	2000015c 	.word	0x2000015c

08003604 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	4603      	mov	r3, r0
 800360c:	6039      	str	r1, [r7, #0]
 800360e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8003610:	79fb      	ldrb	r3, [r7, #7]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d105      	bne.n	8003622 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	4907      	ldr	r1, [pc, #28]	; (8003638 <USBD_FS_ProductStrDescriptor+0x34>)
 800361a:	4808      	ldr	r0, [pc, #32]	; (800363c <USBD_FS_ProductStrDescriptor+0x38>)
 800361c:	f7ff fe7d 	bl	800331a <USBD_GetString>
 8003620:	e004      	b.n	800362c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	4904      	ldr	r1, [pc, #16]	; (8003638 <USBD_FS_ProductStrDescriptor+0x34>)
 8003626:	4805      	ldr	r0, [pc, #20]	; (800363c <USBD_FS_ProductStrDescriptor+0x38>)
 8003628:	f7ff fe77 	bl	800331a <USBD_GetString>
  }
  return USBD_StrDesc;
 800362c:	4b02      	ldr	r3, [pc, #8]	; (8003638 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20000ca0 	.word	0x20000ca0
 800363c:	08003d18 	.word	0x08003d18

08003640 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	4603      	mov	r3, r0
 8003648:	6039      	str	r1, [r7, #0]
 800364a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	4904      	ldr	r1, [pc, #16]	; (8003660 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8003650:	4804      	ldr	r0, [pc, #16]	; (8003664 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8003652:	f7ff fe62 	bl	800331a <USBD_GetString>
  return USBD_StrDesc;
 8003656:	4b02      	ldr	r3, [pc, #8]	; (8003660 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8003658:	4618      	mov	r0, r3
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20000ca0 	.word	0x20000ca0
 8003664:	08003d30 	.word	0x08003d30

08003668 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	6039      	str	r1, [r7, #0]
 8003672:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	221a      	movs	r2, #26
 8003678:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800367a:	f000 f843 	bl	8003704 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800367e:	4b02      	ldr	r3, [pc, #8]	; (8003688 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8003680:	4618      	mov	r0, r3
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	20000160 	.word	0x20000160

0800368c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	4603      	mov	r3, r0
 8003694:	6039      	str	r1, [r7, #0]
 8003696:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8003698:	79fb      	ldrb	r3, [r7, #7]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d105      	bne.n	80036aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	4907      	ldr	r1, [pc, #28]	; (80036c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80036a2:	4808      	ldr	r0, [pc, #32]	; (80036c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80036a4:	f7ff fe39 	bl	800331a <USBD_GetString>
 80036a8:	e004      	b.n	80036b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	4904      	ldr	r1, [pc, #16]	; (80036c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80036ae:	4805      	ldr	r0, [pc, #20]	; (80036c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80036b0:	f7ff fe33 	bl	800331a <USBD_GetString>
  }
  return USBD_StrDesc;
 80036b4:	4b02      	ldr	r3, [pc, #8]	; (80036c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	20000ca0 	.word	0x20000ca0
 80036c4:	08003d44 	.word	0x08003d44

080036c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	4603      	mov	r3, r0
 80036d0:	6039      	str	r1, [r7, #0]
 80036d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80036d4:	79fb      	ldrb	r3, [r7, #7]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d105      	bne.n	80036e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	4907      	ldr	r1, [pc, #28]	; (80036fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80036de:	4808      	ldr	r0, [pc, #32]	; (8003700 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80036e0:	f7ff fe1b 	bl	800331a <USBD_GetString>
 80036e4:	e004      	b.n	80036f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	4904      	ldr	r1, [pc, #16]	; (80036fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80036ea:	4805      	ldr	r0, [pc, #20]	; (8003700 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80036ec:	f7ff fe15 	bl	800331a <USBD_GetString>
  }
  return USBD_StrDesc;
 80036f0:	4b02      	ldr	r3, [pc, #8]	; (80036fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	20000ca0 	.word	0x20000ca0
 8003700:	08003d50 	.word	0x08003d50

08003704 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800370a:	4b0f      	ldr	r3, [pc, #60]	; (8003748 <Get_SerialNum+0x44>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003710:	4b0e      	ldr	r3, [pc, #56]	; (800374c <Get_SerialNum+0x48>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8003716:	4b0e      	ldr	r3, [pc, #56]	; (8003750 <Get_SerialNum+0x4c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4413      	add	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d009      	beq.n	800373e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800372a:	2208      	movs	r2, #8
 800372c:	4909      	ldr	r1, [pc, #36]	; (8003754 <Get_SerialNum+0x50>)
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 f814 	bl	800375c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8003734:	2204      	movs	r2, #4
 8003736:	4908      	ldr	r1, [pc, #32]	; (8003758 <Get_SerialNum+0x54>)
 8003738:	68b8      	ldr	r0, [r7, #8]
 800373a:	f000 f80f 	bl	800375c <IntToUnicode>
  }
}
 800373e:	bf00      	nop
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	1fff7a10 	.word	0x1fff7a10
 800374c:	1fff7a14 	.word	0x1fff7a14
 8003750:	1fff7a18 	.word	0x1fff7a18
 8003754:	20000162 	.word	0x20000162
 8003758:	20000172 	.word	0x20000172

0800375c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800375c:	b480      	push	{r7}
 800375e:	b087      	sub	sp, #28
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	4613      	mov	r3, r2
 8003768:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800376e:	2300      	movs	r3, #0
 8003770:	75fb      	strb	r3, [r7, #23]
 8003772:	e027      	b.n	80037c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	0f1b      	lsrs	r3, r3, #28
 8003778:	2b09      	cmp	r3, #9
 800377a:	d80b      	bhi.n	8003794 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	0f1b      	lsrs	r3, r3, #28
 8003780:	b2da      	uxtb	r2, r3
 8003782:	7dfb      	ldrb	r3, [r7, #23]
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	4619      	mov	r1, r3
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	440b      	add	r3, r1
 800378c:	3230      	adds	r2, #48	; 0x30
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	701a      	strb	r2, [r3, #0]
 8003792:	e00a      	b.n	80037aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	0f1b      	lsrs	r3, r3, #28
 8003798:	b2da      	uxtb	r2, r3
 800379a:	7dfb      	ldrb	r3, [r7, #23]
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	4619      	mov	r1, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	440b      	add	r3, r1
 80037a4:	3237      	adds	r2, #55	; 0x37
 80037a6:	b2d2      	uxtb	r2, r2
 80037a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80037b0:	7dfb      	ldrb	r3, [r7, #23]
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	3301      	adds	r3, #1
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	4413      	add	r3, r2
 80037ba:	2200      	movs	r2, #0
 80037bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80037be:	7dfb      	ldrb	r3, [r7, #23]
 80037c0:	3301      	adds	r3, #1
 80037c2:	75fb      	strb	r3, [r7, #23]
 80037c4:	7dfa      	ldrb	r2, [r7, #23]
 80037c6:	79fb      	ldrb	r3, [r7, #7]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d3d3      	bcc.n	8003774 <IntToUnicode+0x18>
  }
}
 80037cc:	bf00      	nop
 80037ce:	371c      	adds	r7, #28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr
	...

080037d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08a      	sub	sp, #40	; 0x28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e0:	f107 0314 	add.w	r3, r7, #20
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	605a      	str	r2, [r3, #4]
 80037ea:	609a      	str	r2, [r3, #8]
 80037ec:	60da      	str	r2, [r3, #12]
 80037ee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037f8:	d132      	bne.n	8003860 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037fa:	2300      	movs	r3, #0
 80037fc:	613b      	str	r3, [r7, #16]
 80037fe:	4b1a      	ldr	r3, [pc, #104]	; (8003868 <HAL_PCD_MspInit+0x90>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	4a19      	ldr	r2, [pc, #100]	; (8003868 <HAL_PCD_MspInit+0x90>)
 8003804:	f043 0301 	orr.w	r3, r3, #1
 8003808:	6313      	str	r3, [r2, #48]	; 0x30
 800380a:	4b17      	ldr	r3, [pc, #92]	; (8003868 <HAL_PCD_MspInit+0x90>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	613b      	str	r3, [r7, #16]
 8003814:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003816:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800381a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800381c:	2302      	movs	r3, #2
 800381e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003820:	2300      	movs	r3, #0
 8003822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003824:	2303      	movs	r3, #3
 8003826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003828:	230a      	movs	r3, #10
 800382a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800382c:	f107 0314 	add.w	r3, r7, #20
 8003830:	4619      	mov	r1, r3
 8003832:	480e      	ldr	r0, [pc, #56]	; (800386c <HAL_PCD_MspInit+0x94>)
 8003834:	f7fd f8fe 	bl	8000a34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003838:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <HAL_PCD_MspInit+0x90>)
 800383a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383c:	4a0a      	ldr	r2, [pc, #40]	; (8003868 <HAL_PCD_MspInit+0x90>)
 800383e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003842:	6353      	str	r3, [r2, #52]	; 0x34
 8003844:	2300      	movs	r3, #0
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	4b07      	ldr	r3, [pc, #28]	; (8003868 <HAL_PCD_MspInit+0x90>)
 800384a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384c:	4a06      	ldr	r2, [pc, #24]	; (8003868 <HAL_PCD_MspInit+0x90>)
 800384e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003852:	6453      	str	r3, [r2, #68]	; 0x44
 8003854:	4b04      	ldr	r3, [pc, #16]	; (8003868 <HAL_PCD_MspInit+0x90>)
 8003856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003860:	bf00      	nop
 8003862:	3728      	adds	r7, #40	; 0x28
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40023800 	.word	0x40023800
 800386c:	40020000 	.word	0x40020000

08003870 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d139      	bne.n	80038f4 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8003880:	4a1f      	ldr	r2, [pc, #124]	; (8003900 <USBD_LL_Init+0x90>)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a1d      	ldr	r2, [pc, #116]	; (8003900 <USBD_LL_Init+0x90>)
 800388c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003890:	4b1b      	ldr	r3, [pc, #108]	; (8003900 <USBD_LL_Init+0x90>)
 8003892:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003896:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8003898:	4b19      	ldr	r3, [pc, #100]	; (8003900 <USBD_LL_Init+0x90>)
 800389a:	2204      	movs	r2, #4
 800389c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800389e:	4b18      	ldr	r3, [pc, #96]	; (8003900 <USBD_LL_Init+0x90>)
 80038a0:	2202      	movs	r2, #2
 80038a2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80038a4:	4b16      	ldr	r3, [pc, #88]	; (8003900 <USBD_LL_Init+0x90>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80038aa:	4b15      	ldr	r3, [pc, #84]	; (8003900 <USBD_LL_Init+0x90>)
 80038ac:	2202      	movs	r2, #2
 80038ae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80038b0:	4b13      	ldr	r3, [pc, #76]	; (8003900 <USBD_LL_Init+0x90>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80038b6:	4b12      	ldr	r3, [pc, #72]	; (8003900 <USBD_LL_Init+0x90>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80038bc:	4b10      	ldr	r3, [pc, #64]	; (8003900 <USBD_LL_Init+0x90>)
 80038be:	2200      	movs	r2, #0
 80038c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80038c2:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <USBD_LL_Init+0x90>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80038c8:	480d      	ldr	r0, [pc, #52]	; (8003900 <USBD_LL_Init+0x90>)
 80038ca:	f7fd fa51 	bl	8000d70 <HAL_PCD_Init>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 80038d4:	f7fc fe60 	bl	8000598 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80038d8:	2180      	movs	r1, #128	; 0x80
 80038da:	4809      	ldr	r0, [pc, #36]	; (8003900 <USBD_LL_Init+0x90>)
 80038dc:	f7fd fd8f 	bl	80013fe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80038e0:	2240      	movs	r2, #64	; 0x40
 80038e2:	2100      	movs	r1, #0
 80038e4:	4806      	ldr	r0, [pc, #24]	; (8003900 <USBD_LL_Init+0x90>)
 80038e6:	f7fd fd44 	bl	8001372 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80038ea:	2280      	movs	r2, #128	; 0x80
 80038ec:	2101      	movs	r1, #1
 80038ee:	4804      	ldr	r0, [pc, #16]	; (8003900 <USBD_LL_Init+0x90>)
 80038f0:	f7fd fd3f 	bl	8001372 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	20000ea0 	.word	0x20000ea0

08003904 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8003910:	2300      	movs	r3, #0
 8003912:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800391a:	4618      	mov	r0, r3
 800391c:	f7fd fb45 	bl	8000faa <HAL_PCD_Start>
 8003920:	4603      	mov	r3, r0
 8003922:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8003924:	7bfb      	ldrb	r3, [r7, #15]
 8003926:	4618      	mov	r0, r3
 8003928:	f000 f8c4 	bl	8003ab4 <USBD_Get_USB_Status>
 800392c:	4603      	mov	r3, r0
 800392e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8003930:	7bbb      	ldrb	r3, [r7, #14]
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b084      	sub	sp, #16
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
 8003942:	4608      	mov	r0, r1
 8003944:	4611      	mov	r1, r2
 8003946:	461a      	mov	r2, r3
 8003948:	4603      	mov	r3, r0
 800394a:	70fb      	strb	r3, [r7, #3]
 800394c:	460b      	mov	r3, r1
 800394e:	70bb      	strb	r3, [r7, #2]
 8003950:	4613      	mov	r3, r2
 8003952:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003954:	2300      	movs	r3, #0
 8003956:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8003962:	78bb      	ldrb	r3, [r7, #2]
 8003964:	883a      	ldrh	r2, [r7, #0]
 8003966:	78f9      	ldrb	r1, [r7, #3]
 8003968:	f7fd fb41 	bl	8000fee <HAL_PCD_EP_Open>
 800396c:	4603      	mov	r3, r0
 800396e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	4618      	mov	r0, r3
 8003974:	f000 f89e 	bl	8003ab4 <USBD_Get_USB_Status>
 8003978:	4603      	mov	r3, r0
 800397a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800397c:	7bbb      	ldrb	r3, [r7, #14]
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b084      	sub	sp, #16
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
 800398e:	460b      	mov	r3, r1
 8003990:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8003996:	2300      	movs	r3, #0
 8003998:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80039a0:	78fa      	ldrb	r2, [r7, #3]
 80039a2:	4611      	mov	r1, r2
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fd fb8a 	bl	80010be <HAL_PCD_EP_Close>
 80039aa:	4603      	mov	r3, r0
 80039ac:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80039ae:	7bfb      	ldrb	r3, [r7, #15]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 f87f 	bl	8003ab4 <USBD_Get_USB_Status>
 80039b6:	4603      	mov	r3, r0
 80039b8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80039ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80039d4:	2300      	movs	r3, #0
 80039d6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80039de:	78fa      	ldrb	r2, [r7, #3]
 80039e0:	4611      	mov	r1, r2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fd fc61 	bl	80012aa <HAL_PCD_EP_SetStall>
 80039e8:	4603      	mov	r3, r0
 80039ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 f860 	bl	8003ab4 <USBD_Get_USB_Status>
 80039f4:	4603      	mov	r3, r0
 80039f6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80039f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b086      	sub	sp, #24
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	60f8      	str	r0, [r7, #12]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	460b      	mov	r3, r1
 8003a10:	72fb      	strb	r3, [r7, #11]
 8003a12:	4613      	mov	r3, r2
 8003a14:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003a16:	2300      	movs	r3, #0
 8003a18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8003a24:	893b      	ldrh	r3, [r7, #8]
 8003a26:	7af9      	ldrb	r1, [r7, #11]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	f7fd fbf4 	bl	8001216 <HAL_PCD_EP_Transmit>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8003a32:	7dfb      	ldrb	r3, [r7, #23]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 f83d 	bl	8003ab4 <USBD_Get_USB_Status>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8003a3e:	7dbb      	ldrb	r3, [r7, #22]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	607a      	str	r2, [r7, #4]
 8003a52:	461a      	mov	r2, r3
 8003a54:	460b      	mov	r3, r1
 8003a56:	72fb      	strb	r3, [r7, #11]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8003a60:	2300      	movs	r3, #0
 8003a62:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8003a6a:	893b      	ldrh	r3, [r7, #8]
 8003a6c:	7af9      	ldrb	r1, [r7, #11]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	f7fd fb6f 	bl	8001152 <HAL_PCD_EP_Receive>
 8003a74:	4603      	mov	r3, r0
 8003a76:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8003a78:	7dfb      	ldrb	r3, [r7, #23]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 f81a 	bl	8003ab4 <USBD_Get_USB_Status>
 8003a80:	4603      	mov	r3, r0
 8003a82:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8003a84:	7dbb      	ldrb	r3, [r7, #22]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b082      	sub	sp, #8
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
 8003a96:	460b      	mov	r3, r1
 8003a98:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003aa0:	78fa      	ldrb	r2, [r7, #3]
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fd fb9f 	bl	80011e8 <HAL_PCD_EP_GetRxCount>
 8003aaa:	4603      	mov	r3, r0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8003ac2:	79fb      	ldrb	r3, [r7, #7]
 8003ac4:	2b03      	cmp	r3, #3
 8003ac6:	d817      	bhi.n	8003af8 <USBD_Get_USB_Status+0x44>
 8003ac8:	a201      	add	r2, pc, #4	; (adr r2, 8003ad0 <USBD_Get_USB_Status+0x1c>)
 8003aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ace:	bf00      	nop
 8003ad0:	08003ae1 	.word	0x08003ae1
 8003ad4:	08003ae7 	.word	0x08003ae7
 8003ad8:	08003aed 	.word	0x08003aed
 8003adc:	08003af3 	.word	0x08003af3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	73fb      	strb	r3, [r7, #15]
    break;
 8003ae4:	e00b      	b.n	8003afe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	73fb      	strb	r3, [r7, #15]
    break;
 8003aea:	e008      	b.n	8003afe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8003aec:	2301      	movs	r3, #1
 8003aee:	73fb      	strb	r3, [r7, #15]
    break;
 8003af0:	e005      	b.n	8003afe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8003af2:	2302      	movs	r3, #2
 8003af4:	73fb      	strb	r3, [r7, #15]
    break;
 8003af6:	e002      	b.n	8003afe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8003af8:	2302      	movs	r3, #2
 8003afa:	73fb      	strb	r3, [r7, #15]
    break;
 8003afc:	bf00      	nop
  }
  return usb_status;
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bc80      	pop	{r7}
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop

08003b0c <__errno>:
 8003b0c:	4b01      	ldr	r3, [pc, #4]	; (8003b14 <__errno+0x8>)
 8003b0e:	6818      	ldr	r0, [r3, #0]
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	2000017c 	.word	0x2000017c

08003b18 <__libc_init_array>:
 8003b18:	b570      	push	{r4, r5, r6, lr}
 8003b1a:	2500      	movs	r5, #0
 8003b1c:	4e0c      	ldr	r6, [pc, #48]	; (8003b50 <__libc_init_array+0x38>)
 8003b1e:	4c0d      	ldr	r4, [pc, #52]	; (8003b54 <__libc_init_array+0x3c>)
 8003b20:	1ba4      	subs	r4, r4, r6
 8003b22:	10a4      	asrs	r4, r4, #2
 8003b24:	42a5      	cmp	r5, r4
 8003b26:	d109      	bne.n	8003b3c <__libc_init_array+0x24>
 8003b28:	f000 f8ea 	bl	8003d00 <_init>
 8003b2c:	2500      	movs	r5, #0
 8003b2e:	4e0a      	ldr	r6, [pc, #40]	; (8003b58 <__libc_init_array+0x40>)
 8003b30:	4c0a      	ldr	r4, [pc, #40]	; (8003b5c <__libc_init_array+0x44>)
 8003b32:	1ba4      	subs	r4, r4, r6
 8003b34:	10a4      	asrs	r4, r4, #2
 8003b36:	42a5      	cmp	r5, r4
 8003b38:	d105      	bne.n	8003b46 <__libc_init_array+0x2e>
 8003b3a:	bd70      	pop	{r4, r5, r6, pc}
 8003b3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b40:	4798      	blx	r3
 8003b42:	3501      	adds	r5, #1
 8003b44:	e7ee      	b.n	8003b24 <__libc_init_array+0xc>
 8003b46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b4a:	4798      	blx	r3
 8003b4c:	3501      	adds	r5, #1
 8003b4e:	e7f2      	b.n	8003b36 <__libc_init_array+0x1e>
 8003b50:	08003d78 	.word	0x08003d78
 8003b54:	08003d78 	.word	0x08003d78
 8003b58:	08003d78 	.word	0x08003d78
 8003b5c:	08003d7c 	.word	0x08003d7c

08003b60 <malloc>:
 8003b60:	4b02      	ldr	r3, [pc, #8]	; (8003b6c <malloc+0xc>)
 8003b62:	4601      	mov	r1, r0
 8003b64:	6818      	ldr	r0, [r3, #0]
 8003b66:	f000 b85f 	b.w	8003c28 <_malloc_r>
 8003b6a:	bf00      	nop
 8003b6c:	2000017c 	.word	0x2000017c

08003b70 <free>:
 8003b70:	4b02      	ldr	r3, [pc, #8]	; (8003b7c <free+0xc>)
 8003b72:	4601      	mov	r1, r0
 8003b74:	6818      	ldr	r0, [r3, #0]
 8003b76:	f000 b80b 	b.w	8003b90 <_free_r>
 8003b7a:	bf00      	nop
 8003b7c:	2000017c 	.word	0x2000017c

08003b80 <memset>:
 8003b80:	4603      	mov	r3, r0
 8003b82:	4402      	add	r2, r0
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d100      	bne.n	8003b8a <memset+0xa>
 8003b88:	4770      	bx	lr
 8003b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b8e:	e7f9      	b.n	8003b84 <memset+0x4>

08003b90 <_free_r>:
 8003b90:	b538      	push	{r3, r4, r5, lr}
 8003b92:	4605      	mov	r5, r0
 8003b94:	2900      	cmp	r1, #0
 8003b96:	d043      	beq.n	8003c20 <_free_r+0x90>
 8003b98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b9c:	1f0c      	subs	r4, r1, #4
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	bfb8      	it	lt
 8003ba2:	18e4      	addlt	r4, r4, r3
 8003ba4:	f000 f8aa 	bl	8003cfc <__malloc_lock>
 8003ba8:	4a1e      	ldr	r2, [pc, #120]	; (8003c24 <_free_r+0x94>)
 8003baa:	6813      	ldr	r3, [r2, #0]
 8003bac:	4610      	mov	r0, r2
 8003bae:	b933      	cbnz	r3, 8003bbe <_free_r+0x2e>
 8003bb0:	6063      	str	r3, [r4, #4]
 8003bb2:	6014      	str	r4, [r2, #0]
 8003bb4:	4628      	mov	r0, r5
 8003bb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bba:	f000 b8a0 	b.w	8003cfe <__malloc_unlock>
 8003bbe:	42a3      	cmp	r3, r4
 8003bc0:	d90b      	bls.n	8003bda <_free_r+0x4a>
 8003bc2:	6821      	ldr	r1, [r4, #0]
 8003bc4:	1862      	adds	r2, r4, r1
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	bf01      	itttt	eq
 8003bca:	681a      	ldreq	r2, [r3, #0]
 8003bcc:	685b      	ldreq	r3, [r3, #4]
 8003bce:	1852      	addeq	r2, r2, r1
 8003bd0:	6022      	streq	r2, [r4, #0]
 8003bd2:	6063      	str	r3, [r4, #4]
 8003bd4:	6004      	str	r4, [r0, #0]
 8003bd6:	e7ed      	b.n	8003bb4 <_free_r+0x24>
 8003bd8:	4613      	mov	r3, r2
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	b10a      	cbz	r2, 8003be2 <_free_r+0x52>
 8003bde:	42a2      	cmp	r2, r4
 8003be0:	d9fa      	bls.n	8003bd8 <_free_r+0x48>
 8003be2:	6819      	ldr	r1, [r3, #0]
 8003be4:	1858      	adds	r0, r3, r1
 8003be6:	42a0      	cmp	r0, r4
 8003be8:	d10b      	bne.n	8003c02 <_free_r+0x72>
 8003bea:	6820      	ldr	r0, [r4, #0]
 8003bec:	4401      	add	r1, r0
 8003bee:	1858      	adds	r0, r3, r1
 8003bf0:	4282      	cmp	r2, r0
 8003bf2:	6019      	str	r1, [r3, #0]
 8003bf4:	d1de      	bne.n	8003bb4 <_free_r+0x24>
 8003bf6:	6810      	ldr	r0, [r2, #0]
 8003bf8:	6852      	ldr	r2, [r2, #4]
 8003bfa:	4401      	add	r1, r0
 8003bfc:	6019      	str	r1, [r3, #0]
 8003bfe:	605a      	str	r2, [r3, #4]
 8003c00:	e7d8      	b.n	8003bb4 <_free_r+0x24>
 8003c02:	d902      	bls.n	8003c0a <_free_r+0x7a>
 8003c04:	230c      	movs	r3, #12
 8003c06:	602b      	str	r3, [r5, #0]
 8003c08:	e7d4      	b.n	8003bb4 <_free_r+0x24>
 8003c0a:	6820      	ldr	r0, [r4, #0]
 8003c0c:	1821      	adds	r1, r4, r0
 8003c0e:	428a      	cmp	r2, r1
 8003c10:	bf01      	itttt	eq
 8003c12:	6811      	ldreq	r1, [r2, #0]
 8003c14:	6852      	ldreq	r2, [r2, #4]
 8003c16:	1809      	addeq	r1, r1, r0
 8003c18:	6021      	streq	r1, [r4, #0]
 8003c1a:	6062      	str	r2, [r4, #4]
 8003c1c:	605c      	str	r4, [r3, #4]
 8003c1e:	e7c9      	b.n	8003bb4 <_free_r+0x24>
 8003c20:	bd38      	pop	{r3, r4, r5, pc}
 8003c22:	bf00      	nop
 8003c24:	20000200 	.word	0x20000200

08003c28 <_malloc_r>:
 8003c28:	b570      	push	{r4, r5, r6, lr}
 8003c2a:	1ccd      	adds	r5, r1, #3
 8003c2c:	f025 0503 	bic.w	r5, r5, #3
 8003c30:	3508      	adds	r5, #8
 8003c32:	2d0c      	cmp	r5, #12
 8003c34:	bf38      	it	cc
 8003c36:	250c      	movcc	r5, #12
 8003c38:	2d00      	cmp	r5, #0
 8003c3a:	4606      	mov	r6, r0
 8003c3c:	db01      	blt.n	8003c42 <_malloc_r+0x1a>
 8003c3e:	42a9      	cmp	r1, r5
 8003c40:	d903      	bls.n	8003c4a <_malloc_r+0x22>
 8003c42:	230c      	movs	r3, #12
 8003c44:	6033      	str	r3, [r6, #0]
 8003c46:	2000      	movs	r0, #0
 8003c48:	bd70      	pop	{r4, r5, r6, pc}
 8003c4a:	f000 f857 	bl	8003cfc <__malloc_lock>
 8003c4e:	4a21      	ldr	r2, [pc, #132]	; (8003cd4 <_malloc_r+0xac>)
 8003c50:	6814      	ldr	r4, [r2, #0]
 8003c52:	4621      	mov	r1, r4
 8003c54:	b991      	cbnz	r1, 8003c7c <_malloc_r+0x54>
 8003c56:	4c20      	ldr	r4, [pc, #128]	; (8003cd8 <_malloc_r+0xb0>)
 8003c58:	6823      	ldr	r3, [r4, #0]
 8003c5a:	b91b      	cbnz	r3, 8003c64 <_malloc_r+0x3c>
 8003c5c:	4630      	mov	r0, r6
 8003c5e:	f000 f83d 	bl	8003cdc <_sbrk_r>
 8003c62:	6020      	str	r0, [r4, #0]
 8003c64:	4629      	mov	r1, r5
 8003c66:	4630      	mov	r0, r6
 8003c68:	f000 f838 	bl	8003cdc <_sbrk_r>
 8003c6c:	1c43      	adds	r3, r0, #1
 8003c6e:	d124      	bne.n	8003cba <_malloc_r+0x92>
 8003c70:	230c      	movs	r3, #12
 8003c72:	4630      	mov	r0, r6
 8003c74:	6033      	str	r3, [r6, #0]
 8003c76:	f000 f842 	bl	8003cfe <__malloc_unlock>
 8003c7a:	e7e4      	b.n	8003c46 <_malloc_r+0x1e>
 8003c7c:	680b      	ldr	r3, [r1, #0]
 8003c7e:	1b5b      	subs	r3, r3, r5
 8003c80:	d418      	bmi.n	8003cb4 <_malloc_r+0x8c>
 8003c82:	2b0b      	cmp	r3, #11
 8003c84:	d90f      	bls.n	8003ca6 <_malloc_r+0x7e>
 8003c86:	600b      	str	r3, [r1, #0]
 8003c88:	18cc      	adds	r4, r1, r3
 8003c8a:	50cd      	str	r5, [r1, r3]
 8003c8c:	4630      	mov	r0, r6
 8003c8e:	f000 f836 	bl	8003cfe <__malloc_unlock>
 8003c92:	f104 000b 	add.w	r0, r4, #11
 8003c96:	1d23      	adds	r3, r4, #4
 8003c98:	f020 0007 	bic.w	r0, r0, #7
 8003c9c:	1ac3      	subs	r3, r0, r3
 8003c9e:	d0d3      	beq.n	8003c48 <_malloc_r+0x20>
 8003ca0:	425a      	negs	r2, r3
 8003ca2:	50e2      	str	r2, [r4, r3]
 8003ca4:	e7d0      	b.n	8003c48 <_malloc_r+0x20>
 8003ca6:	684b      	ldr	r3, [r1, #4]
 8003ca8:	428c      	cmp	r4, r1
 8003caa:	bf16      	itet	ne
 8003cac:	6063      	strne	r3, [r4, #4]
 8003cae:	6013      	streq	r3, [r2, #0]
 8003cb0:	460c      	movne	r4, r1
 8003cb2:	e7eb      	b.n	8003c8c <_malloc_r+0x64>
 8003cb4:	460c      	mov	r4, r1
 8003cb6:	6849      	ldr	r1, [r1, #4]
 8003cb8:	e7cc      	b.n	8003c54 <_malloc_r+0x2c>
 8003cba:	1cc4      	adds	r4, r0, #3
 8003cbc:	f024 0403 	bic.w	r4, r4, #3
 8003cc0:	42a0      	cmp	r0, r4
 8003cc2:	d005      	beq.n	8003cd0 <_malloc_r+0xa8>
 8003cc4:	1a21      	subs	r1, r4, r0
 8003cc6:	4630      	mov	r0, r6
 8003cc8:	f000 f808 	bl	8003cdc <_sbrk_r>
 8003ccc:	3001      	adds	r0, #1
 8003cce:	d0cf      	beq.n	8003c70 <_malloc_r+0x48>
 8003cd0:	6025      	str	r5, [r4, #0]
 8003cd2:	e7db      	b.n	8003c8c <_malloc_r+0x64>
 8003cd4:	20000200 	.word	0x20000200
 8003cd8:	20000204 	.word	0x20000204

08003cdc <_sbrk_r>:
 8003cdc:	b538      	push	{r3, r4, r5, lr}
 8003cde:	2300      	movs	r3, #0
 8003ce0:	4c05      	ldr	r4, [pc, #20]	; (8003cf8 <_sbrk_r+0x1c>)
 8003ce2:	4605      	mov	r5, r0
 8003ce4:	4608      	mov	r0, r1
 8003ce6:	6023      	str	r3, [r4, #0]
 8003ce8:	f7fc fcac 	bl	8000644 <_sbrk>
 8003cec:	1c43      	adds	r3, r0, #1
 8003cee:	d102      	bne.n	8003cf6 <_sbrk_r+0x1a>
 8003cf0:	6823      	ldr	r3, [r4, #0]
 8003cf2:	b103      	cbz	r3, 8003cf6 <_sbrk_r+0x1a>
 8003cf4:	602b      	str	r3, [r5, #0]
 8003cf6:	bd38      	pop	{r3, r4, r5, pc}
 8003cf8:	200012a0 	.word	0x200012a0

08003cfc <__malloc_lock>:
 8003cfc:	4770      	bx	lr

08003cfe <__malloc_unlock>:
 8003cfe:	4770      	bx	lr

08003d00 <_init>:
 8003d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d02:	bf00      	nop
 8003d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d06:	bc08      	pop	{r3}
 8003d08:	469e      	mov	lr, r3
 8003d0a:	4770      	bx	lr

08003d0c <_fini>:
 8003d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0e:	bf00      	nop
 8003d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d12:	bc08      	pop	{r3}
 8003d14:	469e      	mov	lr, r3
 8003d16:	4770      	bx	lr
